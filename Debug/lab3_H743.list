
lab3_H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08009200  08009200  00019200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000390  24000000  08009a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b10  24000390  08009e18  00020390  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000ea0  08009e18  00020ea0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000203be  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b57  00000000  00000000  00020401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ae2  00000000  00000000  00035f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d8  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dd8  00000000  00000000  00039c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a99  00000000  00000000  0003a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000175ba  00000000  00000000  00073489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fba1  00000000  00000000  0008aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004e20  00000000  00000000  001fa5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001ff404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000390 	.word	0x24000390
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080091e8 	.word	0x080091e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000394 	.word	0x24000394
 80002d4:	080091e8 	.word	0x080091e8

080002d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	463b      	mov	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b30      	ldr	r3, [pc, #192]	; (80003c0 <MX_ADC1_Init+0xe8>)
 80002fe:	4a31      	ldr	r2, [pc, #196]	; (80003c4 <MX_ADC1_Init+0xec>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000304:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800030a:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000318:	2204      	movs	r2, #4
 800031a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000322:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000324:	2200      	movs	r2, #0
 8000326:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800032a:	2201      	movs	r2, #1
 800032c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033a:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000348:	2200      	movs	r2, #0
 800034a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000354:	2200      	movs	r2, #0
 8000356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035a:	4819      	ldr	r0, [pc, #100]	; (80003c0 <MX_ADC1_Init+0xe8>)
 800035c:	f002 f9a8 	bl	80026b0 <HAL_ADC_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000366:	f000 fc0b 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036e:	f107 031c 	add.w	r3, r7, #28
 8000372:	4619      	mov	r1, r3
 8000374:	4812      	ldr	r0, [pc, #72]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000376:	f003 fa21 	bl	80037bc <HAL_ADCEx_MultiModeConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000380:	f000 fbfe 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_ADC1_Init+0xf0>)
 8000386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000388:	2306      	movs	r3, #6
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000390:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000394:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000396:	2304      	movs	r3, #4
 8000398:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a2:	463b      	mov	r3, r7
 80003a4:	4619      	mov	r1, r3
 80003a6:	4806      	ldr	r0, [pc, #24]	; (80003c0 <MX_ADC1_Init+0xe8>)
 80003a8:	f002 fcf0 	bl	8002d8c <HAL_ADC_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003b2:	f000 fbe5 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	240003ac 	.word	0x240003ac
 80003c4:	40022000 	.word	0x40022000
 80003c8:	43210000 	.word	0x43210000

080003cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0ba      	sub	sp, #232	; 0xe8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	22c0      	movs	r2, #192	; 0xc0
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f008 fda7 	bl	8008f40 <memset>
  if(adcHandle->Instance==ADC1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <HAL_ADC_MspInit+0xdc>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d150      	bne.n	800049e <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000408:	2304      	movs	r3, #4
 800040a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 800040c:	2309      	movs	r3, #9
 800040e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000410:	2302      	movs	r3, #2
 8000412:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000414:	2302      	movs	r3, #2
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000418:	2302      	movs	r3, #2
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800041c:	23c0      	movs	r3, #192	; 0xc0
 800041e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000420:	2320      	movs	r3, #32
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8000424:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000428:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800042a:	2300      	movs	r3, #0
 800042c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4618      	mov	r0, r3
 8000436:	f004 fdb5 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000440:	f000 fb9e 	bl	8000b80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 8000446:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800044a:	4a18      	ldr	r2, [pc, #96]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 800044c:	f043 0320 	orr.w	r3, r3, #32
 8000450:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 8000456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800045a:	f003 0320 	and.w	r3, r3, #32
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 8000464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_ADC_MspInit+0xe0>)
 8000474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000480:	2301      	movs	r3, #1
 8000482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	2303      	movs	r3, #3
 8000488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_ADC_MspInit+0xe4>)
 800049a:	f003 fb7d 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800049e:	bf00      	nop
 80004a0:	37e8      	adds	r7, #232	; 0xe8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40022000 	.word	0x40022000
 80004ac:	58024400 	.word	0x58024400
 80004b0:	58020000 	.word	0x58020000

080004b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b81      	ldr	r3, [pc, #516]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	4a7f      	ldr	r2, [pc, #508]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004da:	4b7d      	ldr	r3, [pc, #500]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e8:	4b79      	ldr	r3, [pc, #484]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	4a78      	ldr	r2, [pc, #480]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004f8:	4b75      	ldr	r3, [pc, #468]	; (80006d0 <MX_GPIO_Init+0x21c>)
 80004fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b72      	ldr	r3, [pc, #456]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050c:	4a70      	ldr	r2, [pc, #448]	; (80006d0 <MX_GPIO_Init+0x21c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000516:	4b6e      	ldr	r3, [pc, #440]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000524:	4b6a      	ldr	r3, [pc, #424]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052a:	4a69      	ldr	r2, [pc, #420]	; (80006d0 <MX_GPIO_Init+0x21c>)
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000534:	4b66      	ldr	r3, [pc, #408]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	4b63      	ldr	r3, [pc, #396]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	4a61      	ldr	r2, [pc, #388]	; (80006d0 <MX_GPIO_Init+0x21c>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000560:	4b5b      	ldr	r3, [pc, #364]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000566:	4a5a      	ldr	r2, [pc, #360]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000570:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000584:	4a52      	ldr	r2, [pc, #328]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058e:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <MX_GPIO_Init+0x21c>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000594:	f003 0302 	and.w	r3, r3, #2
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, YDirection_Pin|YEnable_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2130      	movs	r1, #48	; 0x30
 80005a0:	484c      	ldr	r0, [pc, #304]	; (80006d4 <MX_GPIO_Init+0x220>)
 80005a2:	f003 fcc1 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XDirection_Pin|XEnable_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f248 0180 	movw	r1, #32896	; 0x8080
 80005ac:	484a      	ldr	r0, [pc, #296]	; (80006d8 <MX_GPIO_Init+0x224>)
 80005ae:	f003 fcbb 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZEnable_GPIO_Port, ZEnable_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b8:	4848      	ldr	r0, [pc, #288]	; (80006dc <MX_GPIO_Init+0x228>)
 80005ba:	f003 fcb5 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	4847      	ldr	r0, [pc, #284]	; (80006e0 <MX_GPIO_Init+0x22c>)
 80005c4:	f003 fcb0 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Bottom_Pin;
 80005c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(User_Bottom_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4841      	ldr	r0, [pc, #260]	; (80006e4 <MX_GPIO_Init+0x230>)
 80005de:	f003 fadb 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XR_Switch_Sensor_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XR_Switch_Sensor_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <MX_GPIO_Init+0x220>)
 80005f8:	f003 face 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = YDirection_Pin|YEnable_Pin;
 80005fc:	2330      	movs	r3, #48	; 0x30
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	4830      	ldr	r0, [pc, #192]	; (80006d4 <MX_GPIO_Init+0x220>)
 8000614:	f003 fac0 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = XDirection_Pin|XEnable_Pin;
 8000618:	f248 0380 	movw	r3, #32896	; 0x8080
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4829      	ldr	r0, [pc, #164]	; (80006d8 <MX_GPIO_Init+0x224>)
 8000632:	f003 fab1 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_Switch_Sensor_Pin;
 8000636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_Switch_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_GPIO_Init+0x224>)
 800064e:	f003 faa3 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZEnable_Pin;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ZEnable_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_GPIO_Init+0x228>)
 800066c:	f003 fa94 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = YSwitch_Bottom_Pin|YSwitch_Front_Pin;
 8000670:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <MX_GPIO_Init+0x228>)
 8000688:	f003 fa86 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZDirection_Pin;
 800068c:	2320      	movs	r3, #32
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ZDirection_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	480f      	ldr	r0, [pc, #60]	; (80006e0 <MX_GPIO_Init+0x22c>)
 80006a4:	f003 fa78 	bl	8003b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2009      	movs	r0, #9
 80006ae:	f003 fa3e 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b2:	2009      	movs	r0, #9
 80006b4:	f003 fa55 	bl	8003b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f003 fa36 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c2:	2028      	movs	r0, #40	; 0x28
 80006c4:	f003 fa4d 	bl	8003b62 <HAL_NVIC_EnableIRQ>

}
 80006c8:	bf00      	nop
 80006ca:	3730      	adds	r7, #48	; 0x30
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58024400 	.word	0x58024400
 80006d4:	58021400 	.word	0x58021400
 80006d8:	58021000 	.word	0x58021000
 80006dc:	58020c00 	.word	0x58020c00
 80006e0:	58021800 	.word	0x58021800
 80006e4:	58020800 	.word	0x58020800

080006e8 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f8:	d15a      	bne.n	80007b0 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
		if(circle_info.circle_lock){
 80006fa:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80006fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000700:	2b00      	cmp	r3, #0
 8000702:	d01b      	beq.n	800073c <HAL_TIM_PWM_PulseFinishedCallback+0x54>
			if((circle_info.circleisrunning) && (++circle_info.curpuls < circle_info.totalpuls)){
 8000704:	4b5c      	ldr	r3, [pc, #368]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8000706:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00d      	beq.n	800072a <HAL_TIM_PWM_PulseFinishedCallback+0x42>
 800070e:	4b5a      	ldr	r3, [pc, #360]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	4a58      	ldr	r2, [pc, #352]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8000716:	6253      	str	r3, [r2, #36]	; 0x24
 8000718:	4b57      	ldr	r3, [pc, #348]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800071a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800071c:	4b56      	ldr	r3, [pc, #344]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d202      	bcs.n	800072a <HAL_TIM_PWM_PulseFinishedCallback+0x42>
				circle_handler_method2();
 8000724:	f000 ff8c 	bl	8001640 <circle_handler_method2>
			} else {
				circle_info.circleisrunning = 0;
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
			}
			return;
 8000728:	e0a2      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
				circle_info.circleisrunning = 0;
 800072a:	4b53      	ldr	r3, [pc, #332]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000732:	210c      	movs	r1, #12
 8000734:	4851      	ldr	r0, [pc, #324]	; (800087c <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8000736:	f007 f9eb 	bl	8007b10 <HAL_TIM_PWM_Stop>
			return;
 800073a:	e099      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
		}

#if 1	//section for normal part
		if((xstep_motor_info.muststop == 0) && (xstep_motor_info.isrunning)){
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d12d      	bne.n	80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
 8000744:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000746:	7e1b      	ldrb	r3, [r3, #24]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d029      	beq.n	80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
			if(++xstep_motor_info.cur_pulse >= xstep_motor_info.req_pulse){
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	4a4b      	ldr	r2, [pc, #300]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000754:	60d3      	str	r3, [r2, #12]
 8000756:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	4b49      	ldr	r3, [pc, #292]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	429a      	cmp	r2, r3
 8000760:	d307      	bcc.n	8000772 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000762:	210c      	movs	r1, #12
 8000764:	4845      	ldr	r0, [pc, #276]	; (800087c <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8000766:	f007 f9d3 	bl	8007b10 <HAL_TIM_PWM_Stop>
				xstep_motor_info.isrunning = 0;
 800076a:	4b45      	ldr	r3, [pc, #276]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
				return;
 8000770:	e07e      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
			else {
				/** do nothing **/
				return;
			}
#endif
			switch(xstep_motor_info.dtype){
 8000772:	4b43      	ldr	r3, [pc, #268]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 800077c:	2b01      	cmp	r3, #1
 800077e:	d008      	beq.n	8000792 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
					break;
				case CIRCLE:
					xstep_circle_handler(xstep_motor_info.cur_pulse);
					break;
				default:
					break;
 8000780:	e00d      	b.n	800079e <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
					xstep_move_handler(&xstep_motor_info, &xmotor_cnt_info, xstep_motor_info.cur_pulse);
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	461a      	mov	r2, r3
 8000788:	493e      	ldr	r1, [pc, #248]	; (8000884 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 800078a:	483d      	ldr	r0, [pc, #244]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 800078c:	f000 fb10 	bl	8000db0 <xstep_move_handler>
					break;
 8000790:	e005      	b.n	800079e <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
					xstep_circle_handler(xstep_motor_info.cur_pulse);
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fac2 	bl	8000d20 <xstep_circle_handler>
					break;
 800079c:	bf00      	nop
			switch(xstep_motor_info.dtype){
 800079e:	e067      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
			}
		} else {
			xstep_motor_info.isrunning = 0;
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	761a      	strb	r2, [r3, #24]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80007a6:	210c      	movs	r1, #12
 80007a8:	4834      	ldr	r0, [pc, #208]	; (800087c <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 80007aa:	f007 f9b1 	bl	8007b10 <HAL_TIM_PWM_Stop>
			return;
 80007ae:	e05f      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
		}
#endif // step move

	} else if(htim->Instance == TIM3){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a34      	ldr	r2, [pc, #208]	; (8000888 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d15a      	bne.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
		if(circle_info.circle_lock){
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01b      	beq.n	80007fc <HAL_TIM_PWM_PulseFinishedCallback+0x114>
			if((circle_info.circleisrunning) && (++circle_info.curpuls < circle_info.totalpuls)){
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00d      	beq.n	80007ea <HAL_TIM_PWM_PulseFinishedCallback+0x102>
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a28      	ldr	r2, [pc, #160]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007d6:	6253      	str	r3, [r2, #36]	; 0x24
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d202      	bcs.n	80007ea <HAL_TIM_PWM_PulseFinishedCallback+0x102>
				circle_handler_method2();
 80007e4:	f000 ff2c 	bl	8001640 <circle_handler_method2>
			} else {
				circle_info.circleisrunning = 0;
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
			}
			return;
 80007e8:	e042      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
				circle_info.circleisrunning = 0;
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80007f6:	f007 f98b 	bl	8007b10 <HAL_TIM_PWM_Stop>
			return;
 80007fa:	e039      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
		}

#if 1	// section for normal part
		if((ystep_motor_info.muststop == 0) && (ystep_motor_info.isrunning)){
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d12d      	bne.n	8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x178>
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000806:	7e1b      	ldrb	r3, [r3, #24]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d029      	beq.n	8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x178>
			if(++ystep_motor_info.cur_pulse >= ystep_motor_info.req_pulse){
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000814:	60d3      	str	r3, [r2, #12]
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	429a      	cmp	r2, r3
 8000820:	d307      	bcc.n	8000832 <HAL_TIM_PWM_PulseFinishedCallback+0x14a>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000822:	2100      	movs	r1, #0
 8000824:	4819      	ldr	r0, [pc, #100]	; (800088c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 8000826:	f007 f973 	bl	8007b10 <HAL_TIM_PWM_Stop>
				ystep_motor_info.isrunning = 0;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 800082c:	2200      	movs	r2, #0
 800082e:	761a      	strb	r2, [r3, #24]
				return;
 8000830:	e01e      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
			else {
				/** do nothing **/
				return;
			}
#endif
			switch(xstep_motor_info.dtype){
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
 800083c:	2b01      	cmp	r3, #1
 800083e:	d008      	beq.n	8000852 <HAL_TIM_PWM_PulseFinishedCallback+0x16a>
					break;
				case CIRCLE:
					ystep_circle_handler(ystep_motor_info.cur_pulse);
					break;
				default:
					break;
 8000840:	e00d      	b.n	800085e <HAL_TIM_PWM_PulseFinishedCallback+0x176>
					ystep_move_handler(&ystep_motor_info, &ymotor_cnt_info, ystep_motor_info.cur_pulse);
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	461a      	mov	r2, r3
 8000848:	4912      	ldr	r1, [pc, #72]	; (8000894 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 800084c:	f000 fb0a 	bl	8000e64 <ystep_move_handler>
					break;
 8000850:	e005      	b.n	800085e <HAL_TIM_PWM_PulseFinishedCallback+0x176>
					ystep_circle_handler(ystep_motor_info.cur_pulse);
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fa86 	bl	8000d68 <ystep_circle_handler>
					break;
 800085c:	bf00      	nop
			switch(xstep_motor_info.dtype){
 800085e:	e007      	b.n	8000870 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
			}
		} else {
			ystep_motor_info.isrunning = 0;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 800086a:	f007 f951 	bl	8007b10 <HAL_TIM_PWM_Stop>
			return;
 800086e:	bf00      	nop
#endif // step move

	} else {
		/* do nothing */
	}
}
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000c50 	.word	0x24000c50
 800087c:	24000c80 	.word	0x24000c80
 8000880:	24000410 	.word	0x24000410
 8000884:	2400047c 	.word	0x2400047c
 8000888:	40000400 	.word	0x40000400
 800088c:	24000ccc 	.word	0x24000ccc
 8000890:	24000434 	.word	0x24000434
 8000894:	24000864 	.word	0x24000864

08000898 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == XL_Switch_Sensor_Pin){
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008a8:	d10e      	bne.n	80008c8 <HAL_GPIO_EXTI_Callback+0x30>
		if(xstep_motor_info.direction == XLeft_To_LX1){
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d141      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80008b2:	210c      	movs	r1, #12
 80008b4:	4823      	ldr	r0, [pc, #140]	; (8000944 <HAL_GPIO_EXTI_Callback+0xac>)
 80008b6:	f007 f92b 	bl	8007b10 <HAL_TIM_PWM_Stop>
		  xstep_motor_info.l_signal = Switch_Limit_On;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	705a      	strb	r2, [r3, #1]
		  xstep_motor_info.muststop = 1;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
			ystep_motor_info.muststop = 1;
		}
	} else {
		/** do nothing **/
	}
}
 80008c6:	e036      	b.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
	} else if(GPIO_Pin == XR_Switch_Sensor_Pin){
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d10e      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x54>
		if(xstep_motor_info.direction == XRight_To_LX2){
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d12f      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80008d6:	210c      	movs	r1, #12
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <HAL_GPIO_EXTI_Callback+0xac>)
 80008da:	f007 f919 	bl	8007b10 <HAL_TIM_PWM_Stop>
		  xstep_motor_info.r_signal = Switch_Limit_On;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	709a      	strb	r2, [r3, #2]
		  xstep_motor_info.muststop = 1;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
}
 80008ea:	e024      	b.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
	} else if(GPIO_Pin == YSwitch_Bottom_Pin){
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f2:	d10e      	bne.n	8000912 <HAL_GPIO_EXTI_Callback+0x7a>
		if(ystep_motor_info.direction == YLeft_To_LX1_Back){
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d11c      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80008fc:	2100      	movs	r1, #0
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000900:	f007 f906 	bl	8007b10 <HAL_TIM_PWM_Stop>
			ystep_motor_info.r_signal = Switch_Limit_On;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000906:	2200      	movs	r2, #0
 8000908:	709a      	strb	r2, [r3, #2]
			ystep_motor_info.muststop = 1;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
}
 8000910:	e011      	b.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
	} else if(GPIO_Pin == YSwitch_Front_Pin){
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000918:	d10d      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
		if(ystep_motor_info.direction == YRight_To_LX2_Front){
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d109      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x9e>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000922:	2100      	movs	r1, #0
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000926:	f007 f8f3 	bl	8007b10 <HAL_TIM_PWM_Stop>
			ystep_motor_info.l_signal = Switch_Limit_On;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 800092c:	2200      	movs	r2, #0
 800092e:	705a      	strb	r2, [r3, #1]
			ystep_motor_info.muststop = 1;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000410 	.word	0x24000410
 8000944:	24000c80 	.word	0x24000c80
 8000948:	24000434 	.word	0x24000434
 800094c:	24000ccc 	.word	0x24000ccc

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f001 fc07 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f89f 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f7ff fda9 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000962:	f001 f985 	bl	8001c70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000966:	f001 f9f9 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 800096a:	f001 fa6d 	bl	8001e48 <MX_TIM4_Init>
  MX_ADC1_Init();
 800096e:	f7ff fcb3 	bl	80002d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buttom_sig = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	77fb      	strb	r3, [r7, #31]
  while(!buttom_sig){
 8000976:	e00f      	b.n	8000998 <main+0x48>
	buttom_sig = HAL_GPIO_ReadPin(User_Bottom_GPIO_Port, User_Bottom_Pin);
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	4841      	ldr	r0, [pc, #260]	; (8000a84 <main+0x134>)
 800097e:	f003 fabb 	bl	8003ef8 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	77fb      	strb	r3, [r7, #31]
	HAL_Delay(20);
 8000986:	2014      	movs	r0, #20
 8000988:	f001 fc80 	bl	800228c <HAL_Delay>
	if(buttom_sig){
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <main+0x48>
		buttom_sig = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	77fb      	strb	r3, [r7, #31]
		break;
 8000996:	e002      	b.n	800099e <main+0x4e>
  while(!buttom_sig){
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0ec      	beq.n	8000978 <main+0x28>
	}
  }

#if		CALIBRATION
  calibrate_xymotor();
 800099e:	f000 fab5 	bl	8000f0c <calibrate_xymotor>
#endif

  calibrate_pen();
 80009a2:	f000 fb2d 	bl	8001000 <calibrate_pen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    while(!buttom_sig){
 80009a6:	e00f      	b.n	80009c8 <main+0x78>
	  buttom_sig = HAL_GPIO_ReadPin(User_Bottom_GPIO_Port, User_Bottom_Pin);
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	4835      	ldr	r0, [pc, #212]	; (8000a84 <main+0x134>)
 80009ae:	f003 faa3 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	77fb      	strb	r3, [r7, #31]
	  HAL_Delay(30);
 80009b6:	201e      	movs	r0, #30
 80009b8:	f001 fc68 	bl	800228c <HAL_Delay>
	  if(buttom_sig){
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <main+0x78>
		buttom_sig = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	77fb      	strb	r3, [r7, #31]
		break;
 80009c6:	e002      	b.n	80009ce <main+0x7e>
    while(!buttom_sig){
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0ec      	beq.n	80009a8 <main+0x58>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if 1
    int sz = sizeof(movdraw) / sizeof(draw_move_param);
 80009ce:	2333      	movs	r3, #51	; 0x33
 80009d0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < sz; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	e047      	b.n	8000a68 <main+0x118>
    	draw_move_param cur = movdraw[i];
 80009d8:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <main+0x138>)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	4413      	add	r3, r2
 80009e0:	1d3c      	adds	r4, r7, #4
 80009e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	switch(cur.dtype){
 80009e8:	7cbb      	ldrb	r3, [r7, #18]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <main+0xa4>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d01b      	beq.n	8000a2a <main+0xda>
    			circle_info.circle_lock = 0;
    			break;

    		default:
    			/* do nothing */
    		break;
 80009f2:	e036      	b.n	8000a62 <main+0x112>
    			line_move_method2(cur.xlen, cur.xdir, cur.ylen, cur.ydir, cur.pendir);
 80009f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f8:	7a3b      	ldrb	r3, [r7, #8]
 80009fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80009fe:	7c39      	ldrb	r1, [r7, #16]
 8000a00:	7c7a      	ldrb	r2, [r7, #17]
 8000a02:	eef0 0a47 	vmov.f32	s1, s14
 8000a06:	4618      	mov	r0, r3
 8000a08:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0c:	f000 ff48 	bl	80018a0 <line_move_method2>
    			while((xstep_motor_info.isrunning) || (ystep_motor_info.isrunning)){
 8000a10:	e002      	b.n	8000a18 <main+0xc8>
    				HAL_Delay(20);
 8000a12:	2014      	movs	r0, #20
 8000a14:	f001 fc3a 	bl	800228c <HAL_Delay>
    			while((xstep_motor_info.isrunning) || (ystep_motor_info.isrunning)){
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <main+0x13c>)
 8000a1a:	7e1b      	ldrb	r3, [r3, #24]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f8      	bne.n	8000a12 <main+0xc2>
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <main+0x140>)
 8000a22:	7e1b      	ldrb	r3, [r3, #24]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f4      	bne.n	8000a12 <main+0xc2>
    			break;
 8000a28:	e01b      	b.n	8000a62 <main+0x112>
    			circle_move_method2(cur.xlen, cur.xdir, cur.ylen, cur.ydir, cur.pendir);
 8000a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a2e:	7a3b      	ldrb	r3, [r7, #8]
 8000a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a34:	7c39      	ldrb	r1, [r7, #16]
 8000a36:	7c7a      	ldrb	r2, [r7, #17]
 8000a38:	eef0 0a47 	vmov.f32	s1, s14
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a42:	f000 fc8d 	bl	8001360 <circle_move_method2>
    			while(circle_info.circleisrunning){
 8000a46:	e002      	b.n	8000a4e <main+0xfe>
    				HAL_Delay(20);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f001 fc1f 	bl	800228c <HAL_Delay>
    			while(circle_info.circleisrunning){
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <main+0x144>)
 8000a50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f7      	bne.n	8000a48 <main+0xf8>
    			circle_info.circle_lock = 0;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <main+0x144>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    			break;
 8000a60:	bf00      	nop
    for(int i = 0; i < sz; i++){
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbb3      	blt.n	80009d8 <main+0x88>
		HAL_Delay(50);
	}
	circle_info.circle_lock = 0;
#endif

	line_move(0.0, XRight_To_LX2, 0.0, YRight_To_LX2_Front, Z_to_Up);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	eddf 0a08 	vldr	s1, [pc, #32]	; 8000a98 <main+0x148>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000a98 <main+0x148>
 8000a7e:	f000 fb5f 	bl	8001140 <line_move>
  {
 8000a82:	e790      	b.n	80009a6 <main+0x56>
 8000a84:	58020800 	.word	0x58020800
 8000a88:	24000000 	.word	0x24000000
 8000a8c:	24000410 	.word	0x24000410
 8000a90:	24000434 	.word	0x24000434
 8000a94:	24000c50 	.word	0x24000c50
 8000a98:	00000000 	.word	0x00000000

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	; 0x70
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	224c      	movs	r2, #76	; 0x4c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fa48 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 fa42 	bl	8008f40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f003 fa67 	bl	8003f90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xd8>)
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xd8>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae4:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <SystemClock_Config+0xdc>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <SystemClock_Config+0xdc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af8:	bf00      	nop
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <SystemClock_Config+0xdc>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b06:	d1f8      	bne.n	8000afa <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemClock_Config+0xe0>)
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <SystemClock_Config+0xe0>)
 8000b0e:	f023 0303 	bic.w	r3, r3, #3
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2340      	movs	r3, #64	; 0x40
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fa6b 	bl	8004004 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b34:	f000 f824 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	233f      	movs	r3, #63	; 0x3f
 8000b3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 feab 	bl	80048b8 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b68:	f000 f80a 	bl	8000b80 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3770      	adds	r7, #112	; 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58000400 	.word	0x58000400
 8000b78:	58024800 	.word	0x58024800
 8000b7c:	58024400 	.word	0x58024400

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
 8000b8a:	0000      	movs	r0, r0
 8000b8c:	0000      	movs	r0, r0
	...

08000b90 <cnt_array_init>:
	step_motor_info->zisdown = ISUP;
	step_motor_info->drawarray = NULL;
	step_motor_info->dtype = LINE;
}

void cnt_array_init(step_param* step_motor_info, motor_cnt_param* motor_cnt_info, uint16_t reqFreq){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	ed2d 8b04 	vpush	{d8-d9}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	80fb      	strh	r3, [r7, #6]
#if 1	// based on pulses
	double tmp_freq = 0;
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double nxt_cnt = 0.0;
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int t_tao = ACCE_SIZE / 4;
 8000bba:	237d      	movs	r3, #125	; 0x7d
 8000bbc:	61fb      	str	r3, [r7, #28]
	for(int i = 1; i <= ACCE_SIZE; i++){
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8000bc2:	e039      	b.n	8000c38 <cnt_array_init+0xa8>
		tmp_freq = reqFreq - reqFreq * exp((double)(0 - i) / (double)t_tao);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	ee07 3a90 	vmov	s15, r3
 8000bd4:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bda:	425b      	negs	r3, r3
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000bf2:	eeb0 0b45 	vmov.f64	d0, d5
 8000bf6:	f008 f9d7 	bl	8008fa8 <exp>
 8000bfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000bfe:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000c02:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000c06:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		nxt_cnt = 1000000.0 / tmp_freq;
 8000c0a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000c78 <cnt_array_init+0xe8>
 8000c0e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000c12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c16:	ed87 7b08 	vstr	d7, [r7, #32]
		motor_cnt_info->cnt_array[i-1] = (uint16_t)nxt_cnt;
 8000c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000c22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c26:	ee17 3a90 	vmov	r3, s15
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 1; i <= ACCE_SIZE; i++){
 8000c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c34:	3301      	adds	r3, #1
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c3e:	ddc1      	ble.n	8000bc4 <cnt_array_init+0x34>
	}
#endif
	step_motor_info->req_freq = reqFreq;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	829a      	strh	r2, [r3, #20]
	double cal_cnts = 1000000 / reqFreq;
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <cnt_array_init+0xf0>)
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c56:	ed87 7b04 	vstr	d7, [r7, #16]
	step_motor_info->reqcnts = (uint16_t)cal_cnts;
 8000c5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c62:	ee17 3a90 	vmov	r3, s15
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	82da      	strh	r2, [r3, #22]
}
 8000c6c:	bf00      	nop
 8000c6e:	3738      	adds	r7, #56	; 0x38
 8000c70:	46bd      	mov	sp, r7
 8000c72:	ecbd 8b04 	vpop	{d8-d9}
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	412e8480 	.word	0x412e8480
 8000c80:	000f4240 	.word	0x000f4240

08000c84 <step_move>:

void step_move(step_param* step_motor_info, motor_cnt_param* motor_cnt_info, uint32_t length_mm, uint8_t direction, uint32_t port, uint16_t pin, TIM_HandleTypeDef* htim){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	70fb      	strb	r3, [r7, #3]
	uint32_t pul_sum = (double)length_mm / MOVE_REV;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000c9c:	eeb6 5b04 	vmov.f64	d5, #100	; 0x3f200000  0.625
 8000ca0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca8:	ee17 3a90 	vmov	r3, s15
 8000cac:	617b      	str	r3, [r7, #20]
	step_motor_info->req_pulse = pul_sum;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	611a      	str	r2, [r3, #16]
	step_motor_info->direction = direction;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	78fa      	ldrb	r2, [r7, #3]
 8000cb8:	701a      	strb	r2, [r3, #0]
	step_motor_info->isrunning = 1;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	761a      	strb	r2, [r3, #24]
	step_motor_info->cur_pulse = 0;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin((GPIO_TypeDef* )port, pin, direction);
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 f92b 	bl	8003f28 <HAL_GPIO_WritePin>

	if(htim->Instance == TIM2){
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cda:	d10c      	bne.n	8000cf6 <step_move+0x72>
		TIM2->ARR = motor_cnt_info->cnt_array[0];
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR4 = motor_cnt_info->cnt_array[0] / 2;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->ARR = motor_cnt_info->cnt_array[0];
		TIM3->CCR1 = motor_cnt_info->cnt_array[0] / 2;
	} else {
		/* do nothing */
	}
}
 8000cf4:	e00e      	b.n	8000d14 <step_move+0x90>
	} else if (htim->Instance == TIM3){
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <step_move+0x98>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d109      	bne.n	8000d14 <step_move+0x90>
		TIM3->ARR = motor_cnt_info->cnt_array[0];
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <step_move+0x98>)
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CCR1 = motor_cnt_info->cnt_array[0] / 2;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <step_move+0x98>)
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40000400 	.word	0x40000400

08000d20 <xstep_circle_handler>:

void xstep_circle_handler(uint32_t curpuls){
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	uint16_t circlecnt = xstep_motor_info.drawarray[curpuls / 10];
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <xstep_circle_handler+0x40>)
 8000d2a:	69da      	ldr	r2, [r3, #28]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <xstep_circle_handler+0x44>)
 8000d30:	fba1 1303 	umull	r1, r3, r1, r3
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	81fb      	strh	r3, [r7, #14]
	TIM2->ARR = circlecnt;
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR4 = circlecnt / 2;
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	085b      	lsrs	r3, r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	24000410 	.word	0x24000410
 8000d64:	cccccccd 	.word	0xcccccccd

08000d68 <ystep_circle_handler>:

void ystep_circle_handler(uint32_t curpuls){
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint16_t circlecnt = ystep_motor_info.drawarray[curpuls / 10];
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <ystep_circle_handler+0x3c>)
 8000d72:	69da      	ldr	r2, [r3, #28]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	490c      	ldr	r1, [pc, #48]	; (8000da8 <ystep_circle_handler+0x40>)
 8000d78:	fba1 1303 	umull	r1, r3, r1, r3
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	81fb      	strh	r3, [r7, #14]
	TIM3->ARR = circlecnt;
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <ystep_circle_handler+0x44>)
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR1 = circlecnt / 2;
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <ystep_circle_handler+0x44>)
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	24000434 	.word	0x24000434
 8000da8:	cccccccd 	.word	0xcccccccd
 8000dac:	40000400 	.word	0x40000400

08000db0 <xstep_move_handler>:

void xstep_move_handler(step_param* step_motor_info, motor_cnt_param* motor_cnt_info, uint32_t curpuls){
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	uint16_t req_freq = (uint16_t)step_motor_info->reqcnts;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	8adb      	ldrh	r3, [r3, #22]
 8000dc0:	82fb      	strh	r3, [r7, #22]

	if(curpuls < (step_motor_info->req_pulse / 2) ){ // before midpoint
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d21f      	bcs.n	8000e0e <xstep_move_handler+0x5e>

		if(curpuls < ACCE_SIZE){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dd4:	d210      	bcs.n	8000df8 <xstep_move_handler+0x48>
		  TIM2->ARR = motor_cnt_info->cnt_array[curpuls];
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2->CCR4 = motor_cnt_info->cnt_array[curpuls] / 2;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM2->ARR = req_freq;
		  TIM2->CCR4 = req_freq / 2;
		}

	}
}
 8000df6:	e02f      	b.n	8000e58 <xstep_move_handler+0xa8>
		  TIM2->ARR = req_freq;
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TIM2->CCR4 = req_freq / 2;
 8000e00:	8afb      	ldrh	r3, [r7, #22]
 8000e02:	085b      	lsrs	r3, r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e0c:	e024      	b.n	8000e58 <xstep_move_handler+0xa8>
		uint32_t back_index = step_motor_info->req_pulse - curpuls - 1;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	3b01      	subs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
		if(back_index < ACCE_SIZE){
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e20:	d210      	bcs.n	8000e44 <xstep_move_handler+0x94>
		  TIM2->ARR = motor_cnt_info->cnt_array[back_index];
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2->CCR4 = motor_cnt_info->cnt_array[back_index] / 2;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e42:	e009      	b.n	8000e58 <xstep_move_handler+0xa8>
		  TIM2->ARR = req_freq;
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	8afb      	ldrh	r3, [r7, #22]
 8000e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TIM2->CCR4 = req_freq / 2;
 8000e4c:	8afb      	ldrh	r3, [r7, #22]
 8000e4e:	085b      	lsrs	r3, r3, #1
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e58:	bf00      	nop
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <ystep_move_handler>:

void ystep_move_handler(step_param* step_motor_info, motor_cnt_param* motor_cnt_info, uint32_t curpuls){
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	uint16_t req_freq = (uint16_t)step_motor_info->reqcnts;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8adb      	ldrh	r3, [r3, #22]
 8000e74:	82fb      	strh	r3, [r7, #22]

	if(curpuls < (step_motor_info->req_pulse / 2) ){ // before midpoint
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d21b      	bcs.n	8000eba <ystep_move_handler+0x56>

		if(curpuls < ACCE_SIZE){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e88:	d20e      	bcs.n	8000ea8 <ystep_move_handler+0x44>
		  TIM3->ARR = motor_cnt_info->cnt_array[curpuls];
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <ystep_move_handler+0xa4>)
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM3->CCR1 = motor_cnt_info->cnt_array[curpuls] / 2;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <ystep_move_handler+0xa4>)
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM3->ARR = req_freq;
		  TIM3->CCR1 = req_freq / 2;
		}

	}
}
 8000ea6:	e029      	b.n	8000efc <ystep_move_handler+0x98>
		  TIM3->ARR = req_freq;
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <ystep_move_handler+0xa4>)
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TIM3->CCR1 = req_freq / 2;
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	085b      	lsrs	r3, r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <ystep_move_handler+0xa4>)
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb8:	e020      	b.n	8000efc <ystep_move_handler+0x98>
		uint32_t back_index = step_motor_info->req_pulse - curpuls - 1;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
		if(back_index < ACCE_SIZE){
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ecc:	d20e      	bcs.n	8000eec <ystep_move_handler+0x88>
		  TIM3->ARR = motor_cnt_info->cnt_array[back_index];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <ystep_move_handler+0xa4>)
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM3->CCR1 = motor_cnt_info->cnt_array[back_index] / 2;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <ystep_move_handler+0xa4>)
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eea:	e007      	b.n	8000efc <ystep_move_handler+0x98>
		  TIM3->ARR = req_freq;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <ystep_move_handler+0xa4>)
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
		  TIM3->CCR1 = req_freq / 2;
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <ystep_move_handler+0xa4>)
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40000400 	.word	0x40000400

08000f0c <calibrate_xymotor>:

void calibrate_xymotor(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af04      	add	r7, sp, #16
#if 1
	cnt_array_init(&xstep_motor_info, &xmotor_cnt_info, XMOTORMAXV);
 8000f12:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000f16:	4932      	ldr	r1, [pc, #200]	; (8000fe0 <calibrate_xymotor+0xd4>)
 8000f18:	4832      	ldr	r0, [pc, #200]	; (8000fe4 <calibrate_xymotor+0xd8>)
 8000f1a:	f7ff fe39 	bl	8000b90 <cnt_array_init>
	cnt_array_init(&ystep_motor_info, &ymotor_cnt_info, YMOTORMAXV);
 8000f1e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000f22:	4931      	ldr	r1, [pc, #196]	; (8000fe8 <calibrate_xymotor+0xdc>)
 8000f24:	4831      	ldr	r0, [pc, #196]	; (8000fec <calibrate_xymotor+0xe0>)
 8000f26:	f7ff fe33 	bl	8000b90 <cnt_array_init>

	step_move(&xstep_motor_info, &xmotor_cnt_info, 50000, XRight_To_LX2, (uint32_t)XDirection_GPIO_Port, XDirection_Pin, &htim2);
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <calibrate_xymotor+0xe4>)
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <calibrate_xymotor+0xe8>)
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f3c:	4928      	ldr	r1, [pc, #160]	; (8000fe0 <calibrate_xymotor+0xd4>)
 8000f3e:	4829      	ldr	r0, [pc, #164]	; (8000fe4 <calibrate_xymotor+0xd8>)
 8000f40:	f7ff fea0 	bl	8000c84 <step_move>
	step_move(&ystep_motor_info, &ymotor_cnt_info, 50000, YLeft_To_LX1_Back, (uint32_t)YDirection_GPIO_Port, YDirection_Pin, &htim3);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <calibrate_xymotor+0xec>)
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2310      	movs	r3, #16
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <calibrate_xymotor+0xf0>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f56:	4924      	ldr	r1, [pc, #144]	; (8000fe8 <calibrate_xymotor+0xdc>)
 8000f58:	4824      	ldr	r0, [pc, #144]	; (8000fec <calibrate_xymotor+0xe0>)
 8000f5a:	f7ff fe93 	bl	8000c84 <step_move>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f5e:	210c      	movs	r1, #12
 8000f60:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <calibrate_xymotor+0xe4>)
 8000f62:	f006 fe6b 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <calibrate_xymotor+0xec>)
 8000f6a:	f006 fe67 	bl	8007c3c <HAL_TIM_PWM_Start_IT>

	while((xstep_motor_info.muststop == 0) || (ystep_motor_info.muststop == 0)){
 8000f6e:	e003      	b.n	8000f78 <calibrate_xymotor+0x6c>
		HAL_Delay(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f74:	f001 f98a 	bl	800228c <HAL_Delay>
	while((xstep_motor_info.muststop == 0) || (ystep_motor_info.muststop == 0)){
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <calibrate_xymotor+0xd8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f7      	beq.n	8000f70 <calibrate_xymotor+0x64>
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <calibrate_xymotor+0xe0>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f3      	beq.n	8000f70 <calibrate_xymotor+0x64>
	}

	xstep_motor_info.muststop = 0;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <calibrate_xymotor+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
	ystep_motor_info.muststop = 0;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <calibrate_xymotor+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
	step_move(&xstep_motor_info, &xmotor_cnt_info, 13000, XLeft_To_LX1, (uint32_t)XDirection_GPIO_Port, XDirection_Pin, &htim2);
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <calibrate_xymotor+0xe4>)
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <calibrate_xymotor+0xe8>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <calibrate_xymotor+0xd4>)
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <calibrate_xymotor+0xd8>)
 8000faa:	f7ff fe6b 	bl	8000c84 <step_move>
	step_move(&ystep_motor_info, &ymotor_cnt_info, 10000, YRight_To_LX2_Front, (uint32_t)YDirection_GPIO_Port, YDirection_Pin, &htim3);
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <calibrate_xymotor+0xec>)
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2310      	movs	r3, #16
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <calibrate_xymotor+0xf0>)
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fc0:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <calibrate_xymotor+0xdc>)
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <calibrate_xymotor+0xe0>)
 8000fc4:	f7ff fe5e 	bl	8000c84 <step_move>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fc8:	210c      	movs	r1, #12
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <calibrate_xymotor+0xe4>)
 8000fcc:	f006 fe36 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <calibrate_xymotor+0xec>)
 8000fd4:	f006 fe32 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
#endif
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2400047c 	.word	0x2400047c
 8000fe4:	24000410 	.word	0x24000410
 8000fe8:	24000864 	.word	0x24000864
 8000fec:	24000434 	.word	0x24000434
 8000ff0:	24000c80 	.word	0x24000c80
 8000ff4:	58021000 	.word	0x58021000
 8000ff8:	24000ccc 	.word	0x24000ccc
 8000ffc:	58021400 	.word	0x58021400

08001000 <calibrate_pen>:

void calibrate_pen(void){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	while((xstep_motor_info.isrunning) || (ystep_motor_info.isrunning)){
 8001006:	e003      	b.n	8001010 <calibrate_pen+0x10>
		HAL_Delay(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f001 f93e 	bl	800228c <HAL_Delay>
	while((xstep_motor_info.isrunning) || (ystep_motor_info.isrunning)){
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <calibrate_pen+0xac>)
 8001012:	7e1b      	ldrb	r3, [r3, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f7      	bne.n	8001008 <calibrate_pen+0x8>
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <calibrate_pen+0xb0>)
 800101a:	7e1b      	ldrb	r3, [r3, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f3      	bne.n	8001008 <calibrate_pen+0x8>
	}

	HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, Z_to_Down);	/* Z_to_Up Z_to_Down */
 8001020:	2200      	movs	r2, #0
 8001022:	2120      	movs	r1, #32
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <calibrate_pen+0xb4>)
 8001026:	f002 ff7f 	bl	8003f28 <HAL_GPIO_WritePin>
	TIM4->ARR = 500;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <calibrate_pen+0xb8>)
 800102c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR4 = 500 / 2;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <calibrate_pen+0xb8>)
 8001034:	22fa      	movs	r2, #250	; 0xfa
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8001038:	210c      	movs	r1, #12
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <calibrate_pen+0xbc>)
 800103c:	f006 fdfe 	bl	8007c3c <HAL_TIM_PWM_Start_IT>

	uint32_t forcedata = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
	while(forcedata < 28000){
 8001044:	e00e      	b.n	8001064 <calibrate_pen+0x64>
		HAL_ADC_Start(&hadc1);
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <calibrate_pen+0xc0>)
 8001048:	f001 fcd4 	bl	80029f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <calibrate_pen+0xc0>)
 8001052:	f001 fd99 	bl	8002b88 <HAL_ADC_PollForConversion>
		forcedata = HAL_ADC_GetValue(&hadc1);
 8001056:	481a      	ldr	r0, [pc, #104]	; (80010c0 <calibrate_pen+0xc0>)
 8001058:	f001 fe8a 	bl	8002d70 <HAL_ADC_GetValue>
 800105c:	6078      	str	r0, [r7, #4]
		HAL_Delay(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f001 f914 	bl	800228c <HAL_Delay>
	while(forcedata < 28000){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f646 525f 	movw	r2, #27999	; 0x6d5f
 800106a:	4293      	cmp	r3, r2
 800106c:	d9eb      	bls.n	8001046 <calibrate_pen+0x46>
	}
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 800106e:	210c      	movs	r1, #12
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <calibrate_pen+0xbc>)
 8001072:	f006 fd4d 	bl	8007b10 <HAL_TIM_PWM_Stop>
	HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f001 f908 	bl	800228c <HAL_Delay>

#if 1
	zstep_motor_info.zisdown = ISUP;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <calibrate_pen+0xc4>)
 800107e:	2200      	movs	r2, #0
 8001080:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, Z_to_Up);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <calibrate_pen+0xb4>)
 8001088:	f002 ff4e 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 800108c:	210c      	movs	r1, #12
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <calibrate_pen+0xbc>)
 8001090:	f006 fdd4 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_Delay(400);
 8001094:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001098:	f001 f8f8 	bl	800228c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 800109c:	210c      	movs	r1, #12
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <calibrate_pen+0xbc>)
 80010a0:	f006 fd36 	bl	8007b10 <HAL_TIM_PWM_Stop>
#endif
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24000410 	.word	0x24000410
 80010b0:	24000434 	.word	0x24000434
 80010b4:	58021800 	.word	0x58021800
 80010b8:	40000800 	.word	0x40000800
 80010bc:	24000d18 	.word	0x24000d18
 80010c0:	240003ac 	.word	0x240003ac
 80010c4:	24000458 	.word	0x24000458

080010c8 <pen_down>:

void pen_down(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	zstep_motor_info.zisdown = ISDOWN;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <pen_down+0x30>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	765a      	strb	r2, [r3, #25]

	HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, Z_to_Down);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <pen_down+0x34>)
 80010d8:	f002 ff26 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 80010dc:	210c      	movs	r1, #12
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <pen_down+0x38>)
 80010e0:	f006 fdac 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_Delay(400);
 80010e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010e8:	f001 f8d0 	bl	800228c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80010ec:	210c      	movs	r1, #12
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <pen_down+0x38>)
 80010f0:	f006 fd0e 	bl	8007b10 <HAL_TIM_PWM_Stop>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24000458 	.word	0x24000458
 80010fc:	58021800 	.word	0x58021800
 8001100:	24000d18 	.word	0x24000d18

08001104 <pen_up>:

void pen_up(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	zstep_motor_info.zisdown = ISUP;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <pen_up+0x30>)
 800110a:	2200      	movs	r2, #0
 800110c:	765a      	strb	r2, [r3, #25]

	HAL_GPIO_WritePin(ZDirection_GPIO_Port, ZDirection_Pin, Z_to_Up);
 800110e:	2201      	movs	r2, #1
 8001110:	2120      	movs	r1, #32
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <pen_up+0x34>)
 8001114:	f002 ff08 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8001118:	210c      	movs	r1, #12
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <pen_up+0x38>)
 800111c:	f006 fd8e 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_Delay(400);
 8001120:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001124:	f001 f8b2 	bl	800228c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8001128:	210c      	movs	r1, #12
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <pen_up+0x38>)
 800112c:	f006 fcf0 	bl	8007b10 <HAL_TIM_PWM_Stop>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000458 	.word	0x24000458
 8001138:	58021800 	.word	0x58021800
 800113c:	24000d18 	.word	0x24000d18

08001140 <line_move>:

/* brief: draw a line
 * unit is cm
 *
 * */
void line_move(float xlen, uint8_t xdir, float ylen, uint8_t ydir, uint8_t pendown){
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af04      	add	r7, sp, #16
 8001146:	ed87 0a03 	vstr	s0, [r7, #12]
 800114a:	4603      	mov	r3, r0
 800114c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]
 8001152:	460b      	mov	r3, r1
 8001154:	72bb      	strb	r3, [r7, #10]
 8001156:	4613      	mov	r3, r2
 8001158:	727b      	strb	r3, [r7, #9]
	uint32_t xpuls = xlen * 1000.0;
 800115a:	edd7 7a03 	vldr	s15, [r7, #12]
 800115e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001162:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80012d0 <line_move+0x190>
 8001166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	61fb      	str	r3, [r7, #28]
	uint32_t ypuls = ylen * 1000.0;
 8001174:	edd7 7a01 	vldr	s15, [r7, #4]
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80012d0 <line_move+0x190>
 8001180:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001184:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	61bb      	str	r3, [r7, #24]
	uint16_t xvel = (ylen > xlen) ? (float)(XMOTORMAXV) * (xlen / ylen) :  XMOTORMAXV;
 800118e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001192:	edd7 7a03 	vldr	s15, [r7, #12]
 8001196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd0f      	ble.n	80011c0 <line_move+0x80>
 80011a0:	edd7 6a03 	vldr	s13, [r7, #12]
 80011a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012d8 <line_move+0x198>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
 80011be:	e001      	b.n	80011c4 <line_move+0x84>
 80011c0:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80011c4:	82fb      	strh	r3, [r7, #22]
	uint16_t yvel = (ylen > xlen) ? YMOTORMAXV : (float)(YMOTORMAXV) * (ylen / xlen);
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	dd02      	ble.n	80011de <line_move+0x9e>
 80011d8:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80011dc:	e00e      	b.n	80011fc <line_move+0xbc>
 80011de:	edd7 6a01 	vldr	s13, [r7, #4]
 80011e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80012d8 <line_move+0x198>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	82bb      	strh	r3, [r7, #20]

	xstep_motor_info.dtype = LINE;
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <line_move+0x19c>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]
	ystep_motor_info.dtype = LINE;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <line_move+0x1a0>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]

	if(pendown == Z_to_Up){
 800120e:	7a7b      	ldrb	r3, [r7, #9]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <line_move+0xe0>
		if(zstep_motor_info.zisdown == ISDOWN){
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <line_move+0x1a4>)
 8001216:	7e5b      	ldrb	r3, [r3, #25]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <line_move+0xe0>
			pen_up();
 800121c:	f7ff ff72 	bl	8001104 <pen_up>
		} else {
			/* do nothing */
		}
	}

	if(pendown == Z_to_Down){
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d105      	bne.n	8001232 <line_move+0xf2>
		if(zstep_motor_info.zisdown == ISUP){
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <line_move+0x1a4>)
 8001228:	7e5b      	ldrb	r3, [r3, #25]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <line_move+0xf2>
			pen_down();
 800122e:	f7ff ff4b 	bl	80010c8 <pen_down>
		} else {
			/* do nothing */
		}
	}

	if(xlen > 0){
 8001232:	edd7 7a03 	vldr	s15, [r7, #12]
 8001236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	dd11      	ble.n	8001264 <line_move+0x124>
		cnt_array_init(&xstep_motor_info, &xmotor_cnt_info, xvel);
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	461a      	mov	r2, r3
 8001244:	4928      	ldr	r1, [pc, #160]	; (80012e8 <line_move+0x1a8>)
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <line_move+0x19c>)
 8001248:	f7ff fca2 	bl	8000b90 <cnt_array_init>
		step_move(&xstep_motor_info, &xmotor_cnt_info, xpuls, xdir, (uint32_t)XDirection_GPIO_Port, XDirection_Pin, &htim2);
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	4a27      	ldr	r2, [pc, #156]	; (80012ec <line_move+0x1ac>)
 8001250:	9202      	str	r2, [sp, #8]
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <line_move+0x1b0>)
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4922      	ldr	r1, [pc, #136]	; (80012e8 <line_move+0x1a8>)
 800125e:	481f      	ldr	r0, [pc, #124]	; (80012dc <line_move+0x19c>)
 8001260:	f7ff fd10 	bl	8000c84 <step_move>
	}

	if(ylen > 0){
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	dd11      	ble.n	8001296 <line_move+0x156>
		cnt_array_init(&ystep_motor_info, &ymotor_cnt_info, yvel);
 8001272:	8abb      	ldrh	r3, [r7, #20]
 8001274:	461a      	mov	r2, r3
 8001276:	491f      	ldr	r1, [pc, #124]	; (80012f4 <line_move+0x1b4>)
 8001278:	4819      	ldr	r0, [pc, #100]	; (80012e0 <line_move+0x1a0>)
 800127a:	f7ff fc89 	bl	8000b90 <cnt_array_init>
		step_move(&ystep_motor_info, &ymotor_cnt_info, ypuls, ydir, (uint32_t)YDirection_GPIO_Port, YDirection_Pin, &htim3);
 800127e:	7abb      	ldrb	r3, [r7, #10]
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <line_move+0x1b8>)
 8001282:	9202      	str	r2, [sp, #8]
 8001284:	2210      	movs	r2, #16
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <line_move+0x1bc>)
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4919      	ldr	r1, [pc, #100]	; (80012f4 <line_move+0x1b4>)
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <line_move+0x1a0>)
 8001292:	f7ff fcf7 	bl	8000c84 <step_move>
	}

	if(xlen > 0){ HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4); }
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd03      	ble.n	80012ac <line_move+0x16c>
 80012a4:	210c      	movs	r1, #12
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <line_move+0x1ac>)
 80012a8:	f006 fcc8 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	if(ylen > 0){ HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); }
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	dc00      	bgt.n	80012bc <line_move+0x17c>
}
 80012ba:	e003      	b.n	80012c4 <line_move+0x184>
	if(ylen > 0){ HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); }
 80012bc:	2100      	movs	r1, #0
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <line_move+0x1b8>)
 80012c0:	f006 fcbc 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	408f4000 	.word	0x408f4000
 80012d8:	464b2000 	.word	0x464b2000
 80012dc:	24000410 	.word	0x24000410
 80012e0:	24000434 	.word	0x24000434
 80012e4:	24000458 	.word	0x24000458
 80012e8:	2400047c 	.word	0x2400047c
 80012ec:	24000c80 	.word	0x24000c80
 80012f0:	58021000 	.word	0x58021000
 80012f4:	24000864 	.word	0x24000864
 80012f8:	24000ccc 	.word	0x24000ccc
 80012fc:	58021400 	.word	0x58021400

08001300 <enable_timx_stop_timy>:
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
#endif
}

static void enable_timx_stop_timy(void){
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	TIM2->ARR = DRAWCIRCLEV;
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR4 = DRAWCIRCLEV / 2;
 800130e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001312:	2296      	movs	r2, #150	; 0x96
 8001314:	641a      	str	r2, [r3, #64]	; 0x40

	TIM3->ARR = 0;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <enable_timx_stop_timy+0x2c>)
 8001318:	2200      	movs	r2, #0
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 0;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <enable_timx_stop_timy+0x2c>)
 800131e:	2200      	movs	r2, #0
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40000400 	.word	0x40000400

08001330 <enable_timy_stop_timx>:

static void enable_timy_stop_timx(void){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	TIM2->ARR = 0;
 8001334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR4 = 0;
 800133c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001340:	2200      	movs	r2, #0
 8001342:	641a      	str	r2, [r3, #64]	; 0x40

	TIM3->ARR = DRAWCIRCLEV;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <enable_timy_stop_timx+0x2c>)
 8001346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = DRAWCIRCLEV / 2;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <enable_timy_stop_timx+0x2c>)
 800134e:	2296      	movs	r2, #150	; 0x96
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40000400 	.word	0x40000400

08001360 <circle_move_method2>:

void circle_move_method2(float xlen, uint8_t xdir, float ylen, uint8_t ydir, uint8_t pendown){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a03 	vstr	s0, [r7, #12]
 800136a:	4603      	mov	r3, r0
 800136c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001370:	72fb      	strb	r3, [r7, #11]
 8001372:	460b      	mov	r3, r1
 8001374:	72bb      	strb	r3, [r7, #10]
 8001376:	4613      	mov	r3, r2
 8001378:	727b      	strb	r3, [r7, #9]

	if((xdir == XLeft_To_LX1) && (ydir == YRight_To_LX2_Front)){
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d115      	bne.n	80013ac <circle_move_method2+0x4c>
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d112      	bne.n	80013ac <circle_move_method2+0x4c>
		circle_info.dir = NR1;
 8001386:	4ba6      	ldr	r3, [pc, #664]	; (8001620 <circle_move_method2+0x2c0>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]
		circle_info.xcordinate = xlen;
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001396:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <circle_move_method2+0x2c0>)
 8001398:	ed83 7b02 	vstr	d7, [r3, #8]
		circle_info.ycordinate = 0.0;
 800139c:	49a0      	ldr	r1, [pc, #640]	; (8001620 <circle_move_method2+0x2c0>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013aa:	e04d      	b.n	8001448 <circle_move_method2+0xe8>
	} else if((xdir == XLeft_To_LX1) && (ydir == YLeft_To_LX1_Back)){
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d115      	bne.n	80013de <circle_move_method2+0x7e>
 80013b2:	7abb      	ldrb	r3, [r7, #10]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d112      	bne.n	80013de <circle_move_method2+0x7e>
		circle_info.dir = NR2;
 80013b8:	4b99      	ldr	r3, [pc, #612]	; (8001620 <circle_move_method2+0x2c0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]
		circle_info.xcordinate = 0.0;
 80013c0:	4997      	ldr	r1, [pc, #604]	; (8001620 <circle_move_method2+0x2c0>)
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
		circle_info.ycordinate = ylen;
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d6:	4b92      	ldr	r3, [pc, #584]	; (8001620 <circle_move_method2+0x2c0>)
 80013d8:	ed83 7b04 	vstr	d7, [r3, #16]
 80013dc:	e034      	b.n	8001448 <circle_move_method2+0xe8>
	} else if((xdir == XRight_To_LX2) && (ydir == YLeft_To_LX1_Back)){
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d117      	bne.n	8001414 <circle_move_method2+0xb4>
 80013e4:	7abb      	ldrb	r3, [r7, #10]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d114      	bne.n	8001414 <circle_move_method2+0xb4>
		circle_info.dir = NR3;
 80013ea:	4b8d      	ldr	r3, [pc, #564]	; (8001620 <circle_move_method2+0x2c0>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
		circle_info.xcordinate = -xlen;
 80013f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f6:	eef1 7a67 	vneg.f32	s15, s15
 80013fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <circle_move_method2+0x2c0>)
 8001400:	ed83 7b02 	vstr	d7, [r3, #8]
		circle_info.ycordinate = 0.0;
 8001404:	4986      	ldr	r1, [pc, #536]	; (8001620 <circle_move_method2+0x2c0>)
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001412:	e019      	b.n	8001448 <circle_move_method2+0xe8>
	} else if((xdir == XRight_To_LX2) && (ydir == YRight_To_LX2_Front)){
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <circle_move_method2+0xe8>
 800141a:	7abb      	ldrb	r3, [r7, #10]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d113      	bne.n	8001448 <circle_move_method2+0xe8>
		circle_info.dir = NR4;
 8001420:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <circle_move_method2+0x2c0>)
 8001422:	2203      	movs	r2, #3
 8001424:	f883 2020 	strb.w	r2, [r3, #32]
		circle_info.xcordinate = 0.0;
 8001428:	497d      	ldr	r1, [pc, #500]	; (8001620 <circle_move_method2+0x2c0>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c1 2302 	strd	r2, r3, [r1, #8]
		circle_info.ycordinate = -ylen;
 8001436:	edd7 7a01 	vldr	s15, [r7, #4]
 800143a:	eef1 7a67 	vneg.f32	s15, s15
 800143e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001442:	4b77      	ldr	r3, [pc, #476]	; (8001620 <circle_move_method2+0x2c0>)
 8001444:	ed83 7b04 	vstr	d7, [r3, #16]
	} else {
		/* do nothing */
	}

	circle_info.nxterror = 0.0;
 8001448:	4975      	ldr	r1, [pc, #468]	; (8001620 <circle_move_method2+0x2c0>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c1 2306 	strd	r2, r3, [r1, #24]
	circle_info.curpuls = 0;
 8001456:	4b72      	ldr	r3, [pc, #456]	; (8001620 <circle_move_method2+0x2c0>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
	circle_info.totalpuls = xlen * 1600 + ylen * 1600;
 800145c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001460:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001624 <circle_move_method2+0x2c4>
 8001464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001624 <circle_move_method2+0x2c4>
 8001470:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	ee17 2a90 	vmov	r2, s15
 8001480:	4b67      	ldr	r3, [pc, #412]	; (8001620 <circle_move_method2+0x2c0>)
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
	circle_info.xdir = xdir;
 8001484:	4a66      	ldr	r2, [pc, #408]	; (8001620 <circle_move_method2+0x2c0>)
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	7013      	strb	r3, [r2, #0]
	circle_info.ydir = ydir;
 800148a:	4a65      	ldr	r2, [pc, #404]	; (8001620 <circle_move_method2+0x2c0>)
 800148c:	7abb      	ldrb	r3, [r7, #10]
 800148e:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(XDirection_GPIO_Port, XDirection_Pin, xdir);
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	461a      	mov	r2, r3
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	4864      	ldr	r0, [pc, #400]	; (8001628 <circle_move_method2+0x2c8>)
 8001498:	f002 fd46 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YDirection_GPIO_Port, YDirection_Pin, ydir);
 800149c:	7abb      	ldrb	r3, [r7, #10]
 800149e:	461a      	mov	r2, r3
 80014a0:	2110      	movs	r1, #16
 80014a2:	4862      	ldr	r0, [pc, #392]	; (800162c <circle_move_method2+0x2cc>)
 80014a4:	f002 fd40 	bl	8003f28 <HAL_GPIO_WritePin>
	circle_info.circleisrunning = 1;
 80014a8:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <circle_move_method2+0x2c0>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	circle_info.circle_lock = 1;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <circle_move_method2+0x2c0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	switch(circle_info.dir){
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <circle_move_method2+0x2c0>)
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	f200 8084 	bhi.w	80015cc <circle_move_method2+0x26c>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <circle_move_method2+0x16c>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	08001519 	.word	0x08001519
 80014d4:	08001555 	.word	0x08001555
 80014d8:	08001591 	.word	0x08001591
		case NR1:
			circle_info.nxterror = circle_info.nxterror - 2 * circle_info.xcordinate + CIRCLE_REVOLUTION;
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <circle_move_method2+0x2c0>)
 80014de:	ed93 6b06 	vldr	d6, [r3, #24]
 80014e2:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <circle_move_method2+0x2c0>)
 80014e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80014e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014f0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001618 <circle_move_method2+0x2b8>
 80014f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <circle_move_method2+0x2c0>)
 80014fa:	ed83 7b06 	vstr	d7, [r3, #24]
			circle_info.xcordinate = circle_info.xcordinate - CIRCLE_REVOLUTION;
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <circle_move_method2+0x2c0>)
 8001500:	ed93 7b02 	vldr	d7, [r3, #8]
 8001504:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001618 <circle_move_method2+0x2b8>
 8001508:	ee37 7b46 	vsub.f64	d7, d7, d6
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <circle_move_method2+0x2c0>)
 800150e:	ed83 7b02 	vstr	d7, [r3, #8]
			enable_timx_stop_timy();
 8001512:	f7ff fef5 	bl	8001300 <enable_timx_stop_timy>
			break;
 8001516:	e05a      	b.n	80015ce <circle_move_method2+0x26e>

		case NR2:
			circle_info.nxterror = circle_info.nxterror - 2 * circle_info.ycordinate + CIRCLE_REVOLUTION;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <circle_move_method2+0x2c0>)
 800151a:	ed93 6b06 	vldr	d6, [r3, #24]
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <circle_move_method2+0x2c0>)
 8001520:	ed93 7b04 	vldr	d7, [r3, #16]
 8001524:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001528:	ee36 7b47 	vsub.f64	d7, d6, d7
 800152c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001618 <circle_move_method2+0x2b8>
 8001530:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <circle_move_method2+0x2c0>)
 8001536:	ed83 7b06 	vstr	d7, [r3, #24]
			circle_info.ycordinate = circle_info.ycordinate - CIRCLE_REVOLUTION;
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <circle_move_method2+0x2c0>)
 800153c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001540:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001618 <circle_move_method2+0x2b8>
 8001544:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <circle_move_method2+0x2c0>)
 800154a:	ed83 7b04 	vstr	d7, [r3, #16]
			enable_timy_stop_timx();
 800154e:	f7ff feef 	bl	8001330 <enable_timy_stop_timx>
			break;
 8001552:	e03c      	b.n	80015ce <circle_move_method2+0x26e>

		case NR3:
			circle_info.nxterror = circle_info.nxterror - 2 * (-circle_info.xcordinate) + CIRCLE_REVOLUTION;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <circle_move_method2+0x2c0>)
 8001556:	ed93 6b06 	vldr	d6, [r3, #24]
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <circle_move_method2+0x2c0>)
 800155c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001560:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001564:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001568:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001618 <circle_move_method2+0x2b8>
 800156c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <circle_move_method2+0x2c0>)
 8001572:	ed83 7b06 	vstr	d7, [r3, #24]
			circle_info.xcordinate = circle_info.xcordinate + CIRCLE_REVOLUTION;
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <circle_move_method2+0x2c0>)
 8001578:	ed93 7b02 	vldr	d7, [r3, #8]
 800157c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001618 <circle_move_method2+0x2b8>
 8001580:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <circle_move_method2+0x2c0>)
 8001586:	ed83 7b02 	vstr	d7, [r3, #8]
			enable_timx_stop_timy();
 800158a:	f7ff feb9 	bl	8001300 <enable_timx_stop_timy>
			break;
 800158e:	e01e      	b.n	80015ce <circle_move_method2+0x26e>

		case NR4:
			circle_info.nxterror = circle_info.nxterror - 2 * (-circle_info.ycordinate) + CIRCLE_REVOLUTION;
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <circle_move_method2+0x2c0>)
 8001592:	ed93 6b06 	vldr	d6, [r3, #24]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <circle_move_method2+0x2c0>)
 8001598:	ed93 7b04 	vldr	d7, [r3, #16]
 800159c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015a4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001618 <circle_move_method2+0x2b8>
 80015a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <circle_move_method2+0x2c0>)
 80015ae:	ed83 7b06 	vstr	d7, [r3, #24]
			circle_info.ycordinate = circle_info.ycordinate + CIRCLE_REVOLUTION;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <circle_move_method2+0x2c0>)
 80015b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80015b8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001618 <circle_move_method2+0x2b8>
 80015bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <circle_move_method2+0x2c0>)
 80015c2:	ed83 7b04 	vstr	d7, [r3, #16]
			enable_timy_stop_timx();
 80015c6:	f7ff feb3 	bl	8001330 <enable_timy_stop_timx>
			break;
 80015ca:	e000      	b.n	80015ce <circle_move_method2+0x26e>

		default:
			break;
 80015cc:	bf00      	nop
	}

	if(pendown == Z_to_Up){
 80015ce:	7a7b      	ldrb	r3, [r7, #9]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <circle_move_method2+0x280>
		if(zstep_motor_info.zisdown == ISDOWN){
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <circle_move_method2+0x2d0>)
 80015d6:	7e5b      	ldrb	r3, [r3, #25]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <circle_move_method2+0x280>
			pen_up();
 80015dc:	f7ff fd92 	bl	8001104 <pen_up>
		} else {
			/* do nothing */
		}
	}

	if(pendown == Z_to_Down){
 80015e0:	7a7b      	ldrb	r3, [r7, #9]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <circle_move_method2+0x292>
		if(zstep_motor_info.zisdown == ISUP){
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <circle_move_method2+0x2d0>)
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <circle_move_method2+0x292>
			pen_down();
 80015ee:	f7ff fd6b 	bl	80010c8 <pen_down>
		} else {
			/* do nothing */
		}
	}

	TIM2->CNT = 0;
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <circle_move_method2+0x2d4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8001600:	210c      	movs	r1, #12
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <circle_move_method2+0x2d8>)
 8001604:	f006 fb1a 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001608:	2100      	movs	r1, #0
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <circle_move_method2+0x2dc>)
 800160c:	f006 fb16 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	47ae147b 	.word	0x47ae147b
 800161c:	3f447ae1 	.word	0x3f447ae1
 8001620:	24000c50 	.word	0x24000c50
 8001624:	44c80000 	.word	0x44c80000
 8001628:	58021000 	.word	0x58021000
 800162c:	58021400 	.word	0x58021400
 8001630:	24000458 	.word	0x24000458
 8001634:	40000400 	.word	0x40000400
 8001638:	24000c80 	.word	0x24000c80
 800163c:	24000ccc 	.word	0x24000ccc

08001640 <circle_handler_method2>:

void circle_handler_method2(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if(circle_info.nxterror >= 0){
 8001644:	4b94      	ldr	r3, [pc, #592]	; (8001898 <circle_handler_method2+0x258>)
 8001646:	ed93 7b06 	vldr	d7, [r3, #24]
 800164a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	f2c0 8089 	blt.w	8001768 <circle_handler_method2+0x128>
		switch(circle_info.dir){
 8001656:	4b90      	ldr	r3, [pc, #576]	; (8001898 <circle_handler_method2+0x258>)
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	2b03      	cmp	r3, #3
 800165e:	f200 8111 	bhi.w	8001884 <circle_handler_method2+0x244>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <circle_handler_method2+0x28>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001679 	.word	0x08001679
 800166c:	080016b5 	.word	0x080016b5
 8001670:	080016f1 	.word	0x080016f1
 8001674:	0800172d 	.word	0x0800172d
			case NR1:
				circle_info.nxterror = circle_info.nxterror - 2 * circle_info.xcordinate + CIRCLE_REVOLUTION;
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <circle_handler_method2+0x258>)
 800167a:	ed93 6b06 	vldr	d6, [r3, #24]
 800167e:	4b86      	ldr	r3, [pc, #536]	; (8001898 <circle_handler_method2+0x258>)
 8001680:	ed93 7b02 	vldr	d7, [r3, #8]
 8001684:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001688:	ee36 7b47 	vsub.f64	d7, d6, d7
 800168c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8001890 <circle_handler_method2+0x250>
 8001690:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001694:	4b80      	ldr	r3, [pc, #512]	; (8001898 <circle_handler_method2+0x258>)
 8001696:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.xcordinate = circle_info.xcordinate - CIRCLE_REVOLUTION;
 800169a:	4b7f      	ldr	r3, [pc, #508]	; (8001898 <circle_handler_method2+0x258>)
 800169c:	ed93 7b02 	vldr	d7, [r3, #8]
 80016a0:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8001890 <circle_handler_method2+0x250>
 80016a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016a8:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <circle_handler_method2+0x258>)
 80016aa:	ed83 7b02 	vstr	d7, [r3, #8]
				enable_timx_stop_timy();
 80016ae:	f7ff fe27 	bl	8001300 <enable_timx_stop_timy>
				break;
 80016b2:	e0ea      	b.n	800188a <circle_handler_method2+0x24a>

			case NR2:
				circle_info.nxterror = circle_info.nxterror - 2 * circle_info.ycordinate + CIRCLE_REVOLUTION;
 80016b4:	4b78      	ldr	r3, [pc, #480]	; (8001898 <circle_handler_method2+0x258>)
 80016b6:	ed93 6b06 	vldr	d6, [r3, #24]
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <circle_handler_method2+0x258>)
 80016bc:	ed93 7b04 	vldr	d7, [r3, #16]
 80016c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016c8:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001890 <circle_handler_method2+0x250>
 80016cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016d0:	4b71      	ldr	r3, [pc, #452]	; (8001898 <circle_handler_method2+0x258>)
 80016d2:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.ycordinate = circle_info.ycordinate - CIRCLE_REVOLUTION;
 80016d6:	4b70      	ldr	r3, [pc, #448]	; (8001898 <circle_handler_method2+0x258>)
 80016d8:	ed93 7b04 	vldr	d7, [r3, #16]
 80016dc:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8001890 <circle_handler_method2+0x250>
 80016e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016e4:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <circle_handler_method2+0x258>)
 80016e6:	ed83 7b04 	vstr	d7, [r3, #16]
				enable_timy_stop_timx();
 80016ea:	f7ff fe21 	bl	8001330 <enable_timy_stop_timx>
				break;
 80016ee:	e0cc      	b.n	800188a <circle_handler_method2+0x24a>

			case NR3:
				circle_info.nxterror = circle_info.nxterror - 2 * (-circle_info.xcordinate) + CIRCLE_REVOLUTION;
 80016f0:	4b69      	ldr	r3, [pc, #420]	; (8001898 <circle_handler_method2+0x258>)
 80016f2:	ed93 6b06 	vldr	d6, [r3, #24]
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <circle_handler_method2+0x258>)
 80016f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80016fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001700:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001704:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001890 <circle_handler_method2+0x250>
 8001708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800170c:	4b62      	ldr	r3, [pc, #392]	; (8001898 <circle_handler_method2+0x258>)
 800170e:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.xcordinate = circle_info.xcordinate + CIRCLE_REVOLUTION;
 8001712:	4b61      	ldr	r3, [pc, #388]	; (8001898 <circle_handler_method2+0x258>)
 8001714:	ed93 7b02 	vldr	d7, [r3, #8]
 8001718:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001890 <circle_handler_method2+0x250>
 800171c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <circle_handler_method2+0x258>)
 8001722:	ed83 7b02 	vstr	d7, [r3, #8]
				enable_timx_stop_timy();
 8001726:	f7ff fdeb 	bl	8001300 <enable_timx_stop_timy>
				break;
 800172a:	e0ae      	b.n	800188a <circle_handler_method2+0x24a>

			case NR4:
				circle_info.nxterror = circle_info.nxterror - 2 * (-circle_info.ycordinate) + CIRCLE_REVOLUTION;
 800172c:	4b5a      	ldr	r3, [pc, #360]	; (8001898 <circle_handler_method2+0x258>)
 800172e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <circle_handler_method2+0x258>)
 8001734:	ed93 7b04 	vldr	d7, [r3, #16]
 8001738:	ee37 7b07 	vadd.f64	d7, d7, d7
 800173c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001740:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001890 <circle_handler_method2+0x250>
 8001744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <circle_handler_method2+0x258>)
 800174a:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.ycordinate = circle_info.ycordinate + CIRCLE_REVOLUTION;
 800174e:	4b52      	ldr	r3, [pc, #328]	; (8001898 <circle_handler_method2+0x258>)
 8001750:	ed93 7b04 	vldr	d7, [r3, #16]
 8001754:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001890 <circle_handler_method2+0x250>
 8001758:	ee37 7b06 	vadd.f64	d7, d7, d6
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <circle_handler_method2+0x258>)
 800175e:	ed83 7b04 	vstr	d7, [r3, #16]
				enable_timy_stop_timx();
 8001762:	f7ff fde5 	bl	8001330 <enable_timy_stop_timx>
				break;
 8001766:	e090      	b.n	800188a <circle_handler_method2+0x24a>

			default:
				break;
		}
	} else {
		switch(circle_info.dir){
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <circle_handler_method2+0x258>)
 800176a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176e:	2b03      	cmp	r3, #3
 8001770:	f200 808a 	bhi.w	8001888 <circle_handler_method2+0x248>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <circle_handler_method2+0x13c>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017c9 	.word	0x080017c9
 8001784:	08001809 	.word	0x08001809
 8001788:	08001849 	.word	0x08001849
			case NR1:
				circle_info.nxterror = circle_info.nxterror + 2 * circle_info.ycordinate + CIRCLE_REVOLUTION;
 800178c:	4b42      	ldr	r3, [pc, #264]	; (8001898 <circle_handler_method2+0x258>)
 800178e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <circle_handler_method2+0x258>)
 8001794:	ed93 7b04 	vldr	d7, [r3, #16]
 8001798:	ee37 7b07 	vadd.f64	d7, d7, d7
 800179c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017a0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001890 <circle_handler_method2+0x250>
 80017a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017a8:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <circle_handler_method2+0x258>)
 80017aa:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.ycordinate = circle_info.ycordinate + CIRCLE_REVOLUTION;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <circle_handler_method2+0x258>)
 80017b0:	ed93 7b04 	vldr	d7, [r3, #16]
 80017b4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8001890 <circle_handler_method2+0x250>
 80017b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <circle_handler_method2+0x258>)
 80017be:	ed83 7b04 	vstr	d7, [r3, #16]
				enable_timy_stop_timx();
 80017c2:	f7ff fdb5 	bl	8001330 <enable_timy_stop_timx>
				break;
 80017c6:	e060      	b.n	800188a <circle_handler_method2+0x24a>

			case NR2:
				circle_info.nxterror = circle_info.nxterror + 2 * (-circle_info.xcordinate) + CIRCLE_REVOLUTION;
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <circle_handler_method2+0x258>)
 80017ca:	ed93 6b06 	vldr	d6, [r3, #24]
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <circle_handler_method2+0x258>)
 80017d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80017d4:	eeb1 7b47 	vneg.f64	d7, d7
 80017d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017e0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001890 <circle_handler_method2+0x250>
 80017e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <circle_handler_method2+0x258>)
 80017ea:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.xcordinate = circle_info.xcordinate - CIRCLE_REVOLUTION;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <circle_handler_method2+0x258>)
 80017f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80017f4:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001890 <circle_handler_method2+0x250>
 80017f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <circle_handler_method2+0x258>)
 80017fe:	ed83 7b02 	vstr	d7, [r3, #8]
				enable_timx_stop_timy();
 8001802:	f7ff fd7d 	bl	8001300 <enable_timx_stop_timy>
				break;
 8001806:	e040      	b.n	800188a <circle_handler_method2+0x24a>

			case NR3:
				circle_info.nxterror = circle_info.nxterror + 2 * (-circle_info.ycordinate) + CIRCLE_REVOLUTION;
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <circle_handler_method2+0x258>)
 800180a:	ed93 6b06 	vldr	d6, [r3, #24]
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <circle_handler_method2+0x258>)
 8001810:	ed93 7b04 	vldr	d7, [r3, #16]
 8001814:	eeb1 7b47 	vneg.f64	d7, d7
 8001818:	ee37 7b07 	vadd.f64	d7, d7, d7
 800181c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001820:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001890 <circle_handler_method2+0x250>
 8001824:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <circle_handler_method2+0x258>)
 800182a:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.ycordinate = circle_info.ycordinate - CIRCLE_REVOLUTION;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <circle_handler_method2+0x258>)
 8001830:	ed93 7b04 	vldr	d7, [r3, #16]
 8001834:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001890 <circle_handler_method2+0x250>
 8001838:	ee37 7b46 	vsub.f64	d7, d7, d6
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <circle_handler_method2+0x258>)
 800183e:	ed83 7b04 	vstr	d7, [r3, #16]
				enable_timy_stop_timx();
 8001842:	f7ff fd75 	bl	8001330 <enable_timy_stop_timx>
				break;
 8001846:	e020      	b.n	800188a <circle_handler_method2+0x24a>

			case NR4:
				circle_info.nxterror = circle_info.nxterror + 2 * circle_info.xcordinate + CIRCLE_REVOLUTION;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <circle_handler_method2+0x258>)
 800184a:	ed93 6b06 	vldr	d6, [r3, #24]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <circle_handler_method2+0x258>)
 8001850:	ed93 7b02 	vldr	d7, [r3, #8]
 8001854:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001858:	ee36 7b07 	vadd.f64	d7, d6, d7
 800185c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001890 <circle_handler_method2+0x250>
 8001860:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <circle_handler_method2+0x258>)
 8001866:	ed83 7b06 	vstr	d7, [r3, #24]
				circle_info.xcordinate = circle_info.xcordinate + CIRCLE_REVOLUTION;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <circle_handler_method2+0x258>)
 800186c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001870:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8001890 <circle_handler_method2+0x250>
 8001874:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <circle_handler_method2+0x258>)
 800187a:	ed83 7b02 	vstr	d7, [r3, #8]
				enable_timx_stop_timy();
 800187e:	f7ff fd3f 	bl	8001300 <enable_timx_stop_timy>
				break;
 8001882:	e002      	b.n	800188a <circle_handler_method2+0x24a>
				break;
 8001884:	bf00      	nop
 8001886:	e000      	b.n	800188a <circle_handler_method2+0x24a>

			default:
				break;
 8001888:	bf00      	nop
		}
	}
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	47ae147b 	.word	0x47ae147b
 8001894:	3f447ae1 	.word	0x3f447ae1
 8001898:	24000c50 	.word	0x24000c50
 800189c:	00000000 	.word	0x00000000

080018a0 <line_move_method2>:

void line_move_method2(float xlen, uint8_t xdir, float ylen, uint8_t ydir, uint8_t pendown){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018aa:	4603      	mov	r3, r0
 80018ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80018b0:	72fb      	strb	r3, [r7, #11]
 80018b2:	460b      	mov	r3, r1
 80018b4:	72bb      	strb	r3, [r7, #10]
 80018b6:	4613      	mov	r3, r2
 80018b8:	727b      	strb	r3, [r7, #9]
	uint32_t xpuls = xlen * 1000.0;
 80018ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80018be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c2:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001a38 <line_move_method2+0x198>
 80018c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	61fb      	str	r3, [r7, #28]
	uint32_t ypuls = ylen * 1000.0;
 80018d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018dc:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a38 <line_move_method2+0x198>
 80018e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018e8:	ee17 3a90 	vmov	r3, s15
 80018ec:	61bb      	str	r3, [r7, #24]
	uint16_t xvel = (ylen > xlen) ? (float)(DRAWCIRCLEV) * (ylen / xlen) : DRAWCIRCLEV;
 80018ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80018f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd0f      	ble.n	8001920 <line_move_method2+0x80>
 8001900:	edd7 6a01 	vldr	s13, [r7, #4]
 8001904:	ed97 7a03 	vldr	s14, [r7, #12]
 8001908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a40 <line_move_method2+0x1a0>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	b29b      	uxth	r3, r3
 800191e:	e001      	b.n	8001924 <line_move_method2+0x84>
 8001920:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001924:	82fb      	strh	r3, [r7, #22]
	uint16_t yvel = (ylen > xlen) ? DRAWCIRCLEV : (float)(DRAWCIRCLEV) * (xlen / ylen);
 8001926:	ed97 7a01 	vldr	s14, [r7, #4]
 800192a:	edd7 7a03 	vldr	s15, [r7, #12]
 800192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dd02      	ble.n	800193e <line_move_method2+0x9e>
 8001938:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800193c:	e00e      	b.n	800195c <line_move_method2+0xbc>
 800193e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001942:	ed97 7a01 	vldr	s14, [r7, #4]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001a40 <line_move_method2+0x1a0>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	b29b      	uxth	r3, r3
 800195c:	82bb      	strh	r3, [r7, #20]

	xstep_motor_info.dtype = LINE;
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <line_move_method2+0x1a4>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2020 	strb.w	r2, [r3, #32]
	ystep_motor_info.dtype = LINE;
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <line_move_method2+0x1a8>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

	if(xlen > 0){
 800196e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd15      	ble.n	80019a8 <line_move_method2+0x108>
		//cnt_array_init(&xstep_motor_info, &xmotor_cnt_info, xvel);
		step_move(&xstep_motor_info, &xmotor_cnt_info, xpuls, xdir, (uint32_t)XDirection_GPIO_Port, XDirection_Pin, &htim2);
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <line_move_method2+0x1ac>)
 8001980:	9202      	str	r2, [sp, #8]
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <line_move_method2+0x1b0>)
 8001988:	9200      	str	r2, [sp, #0]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4931      	ldr	r1, [pc, #196]	; (8001a54 <line_move_method2+0x1b4>)
 800198e:	482d      	ldr	r0, [pc, #180]	; (8001a44 <line_move_method2+0x1a4>)
 8001990:	f7ff f978 	bl	8000c84 <step_move>
		TIM2->ARR = xvel;
 8001994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001998:	8afb      	ldrh	r3, [r7, #22]
 800199a:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->CCR4 = xvel / 2;
 800199c:	8afb      	ldrh	r3, [r7, #22]
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(ylen > 0){
 80019a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	dd13      	ble.n	80019de <line_move_method2+0x13e>
		//cnt_array_init(&ystep_motor_info, &ymotor_cnt_info, yvel);
		step_move(&ystep_motor_info, &ymotor_cnt_info, ypuls, ydir, (uint32_t)YDirection_GPIO_Port, YDirection_Pin, &htim3);
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <line_move_method2+0x1b8>)
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	2210      	movs	r2, #16
 80019be:	9201      	str	r2, [sp, #4]
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <line_move_method2+0x1bc>)
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4926      	ldr	r1, [pc, #152]	; (8001a60 <line_move_method2+0x1c0>)
 80019c8:	481f      	ldr	r0, [pc, #124]	; (8001a48 <line_move_method2+0x1a8>)
 80019ca:	f7ff f95b 	bl	8000c84 <step_move>
		TIM3->ARR = yvel;
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <line_move_method2+0x1c4>)
 80019d0:	8abb      	ldrh	r3, [r7, #20]
 80019d2:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR1 = yvel / 2;
 80019d4:	8abb      	ldrh	r3, [r7, #20]
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <line_move_method2+0x1c4>)
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(pendown == Z_to_Up){
 80019de:	7a7b      	ldrb	r3, [r7, #9]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <line_move_method2+0x150>
		if(zstep_motor_info.zisdown == ISDOWN){
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <line_move_method2+0x1c8>)
 80019e6:	7e5b      	ldrb	r3, [r3, #25]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <line_move_method2+0x150>
			pen_up();
 80019ec:	f7ff fb8a 	bl	8001104 <pen_up>
		} else {
			/* do nothing */
		}
	}

	if(pendown == Z_to_Down){
 80019f0:	7a7b      	ldrb	r3, [r7, #9]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <line_move_method2+0x162>
		if(zstep_motor_info.zisdown == ISUP){
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <line_move_method2+0x1c8>)
 80019f8:	7e5b      	ldrb	r3, [r3, #25]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <line_move_method2+0x162>
			pen_down();
 80019fe:	f7ff fb63 	bl	80010c8 <pen_down>
		} else {
			/* do nothing */
		}
	}

	if(xlen > 0){ HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4); }
 8001a02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	dd03      	ble.n	8001a18 <line_move_method2+0x178>
 8001a10:	210c      	movs	r1, #12
 8001a12:	480e      	ldr	r0, [pc, #56]	; (8001a4c <line_move_method2+0x1ac>)
 8001a14:	f006 f912 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
	if(ylen > 0){ HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); }
 8001a18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dc00      	bgt.n	8001a28 <line_move_method2+0x188>
}
 8001a26:	e003      	b.n	8001a30 <line_move_method2+0x190>
	if(ylen > 0){ HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); }
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <line_move_method2+0x1b8>)
 8001a2c:	f006 f906 	bl	8007c3c <HAL_TIM_PWM_Start_IT>
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	408f4000 	.word	0x408f4000
 8001a40:	43960000 	.word	0x43960000
 8001a44:	24000410 	.word	0x24000410
 8001a48:	24000434 	.word	0x24000434
 8001a4c:	24000c80 	.word	0x24000c80
 8001a50:	58021000 	.word	0x58021000
 8001a54:	2400047c 	.word	0x2400047c
 8001a58:	24000ccc 	.word	0x24000ccc
 8001a5c:	58021400 	.word	0x58021400
 8001a60:	24000864 	.word	0x24000864
 8001a64:	40000400 	.word	0x40000400
 8001a68:	24000458 	.word	0x24000458

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MspInit+0x30>)
 8001a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x30>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x30>)
 8001a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	58024400 	.word	0x58024400

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 fbae 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(XR_Switch_Sensor_Pin);
 8001af8:	2008      	movs	r0, #8
 8001afa:	f002 fa2e 	bl	8003f5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <TIM2_IRQHandler+0x10>)
 8001b0a:	f006 f9f1 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24000c80 	.word	0x24000c80

08001b18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM3_IRQHandler+0x10>)
 8001b1e:	f006 f9e7 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24000ccc 	.word	0x24000ccc

08001b2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM4_IRQHandler+0x10>)
 8001b32:	f006 f9dd 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24000d18 	.word	0x24000d18

08001b40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(XL_Switch_Sensor_Pin);
 8001b44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b48:	f002 fa07 	bl	8003f5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(YSwitch_Bottom_Pin);
 8001b4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b50:	f002 fa03 	bl	8003f5a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(YSwitch_Front_Pin);
 8001b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b58:	f002 f9ff 	bl	8003f5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <SystemInit+0xe4>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6a:	4a36      	ldr	r2, [pc, #216]	; (8001c44 <SystemInit+0xe4>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <SystemInit+0xe8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d807      	bhi.n	8001b90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <SystemInit+0xe8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 030f 	bic.w	r3, r3, #15
 8001b88:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <SystemInit+0xe8>)
 8001b8a:	f043 0307 	orr.w	r3, r3, #7
 8001b8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <SystemInit+0xec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <SystemInit+0xec>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <SystemInit+0xec>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <SystemInit+0xec>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4929      	ldr	r1, [pc, #164]	; (8001c4c <SystemInit+0xec>)
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <SystemInit+0xf0>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <SystemInit+0xe8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <SystemInit+0xe8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 030f 	bic.w	r3, r3, #15
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <SystemInit+0xe8>)
 8001bc4:	f043 0307 	orr.w	r3, r3, #7
 8001bc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <SystemInit+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <SystemInit+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <SystemInit+0xec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <SystemInit+0xec>)
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <SystemInit+0xf4>)
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <SystemInit+0xec>)
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <SystemInit+0xf8>)
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <SystemInit+0xec>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <SystemInit+0xfc>)
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <SystemInit+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <SystemInit+0xec>)
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <SystemInit+0xfc>)
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <SystemInit+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <SystemInit+0xec>)
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <SystemInit+0xfc>)
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <SystemInit+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <SystemInit+0xec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <SystemInit+0xec>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <SystemInit+0xec>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <SystemInit+0x100>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <SystemInit+0x104>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c2a:	d202      	bcs.n	8001c32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <SystemInit+0x108>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <SystemInit+0x10c>)
 8001c34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	52002000 	.word	0x52002000
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c54:	02020200 	.word	0x02020200
 8001c58:	01ff0000 	.word	0x01ff0000
 8001c5c:	01010280 	.word	0x01010280
 8001c60:	5c001000 	.word	0x5c001000
 8001c64:	ffff0000 	.word	0xffff0000
 8001c68:	51008108 	.word	0x51008108
 8001c6c:	52004000 	.word	0x52004000

08001c70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cac:	223f      	movs	r2, #63	; 0x3f
 8001cae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cca:	f005 fe69 	bl	80079a0 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cd4:	f7fe ff54 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001ce6:	f006 fb1f 	bl	8008328 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cf0:	f7fe ff46 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cf6:	f005 feaa 	bl	8007a4e <HAL_TIM_PWM_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d00:	f7fe ff3e 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d14:	f007 f868 	bl	8008de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d1e:	f7fe ff2f 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	; 0x60
 8001d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	220c      	movs	r2, #12
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d3a:	f006 f9e1 	bl	8008100 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d44:	f7fe ff1c 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d4a:	f000 f957 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001d4e:	bf00      	nop
 8001d50:	3738      	adds	r7, #56	; 0x38
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	24000c80 	.word	0x24000c80

08001d5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001d90:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001d96:	223f      	movs	r2, #63	; 0x3f
 8001d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db2:	4823      	ldr	r0, [pc, #140]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001db4:	f005 fdf4 	bl	80079a0 <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dbe:	f7fe fedf 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	481c      	ldr	r0, [pc, #112]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001dd0:	f006 faaa 	bl	8008328 <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dda:	f7fe fed1 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dde:	4818      	ldr	r0, [pc, #96]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001de0:	f005 fe35 	bl	8007a4e <HAL_TIM_PWM_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dea:	f7fe fec9 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4810      	ldr	r0, [pc, #64]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001dfe:	f006 fff3 	bl	8008de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e08:	f7fe feba 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	; 0x60
 8001e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001e24:	f006 f96c 	bl	8008100 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e2e:	f7fe fea7 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e32:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_TIM3_Init+0xe4>)
 8001e34:	f000 f8e2 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001e38:	bf00      	nop
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24000ccc 	.word	0x24000ccc
 8001e44:	40000400 	.word	0x40000400

08001e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	615a      	str	r2, [r3, #20]
 8001e78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e7c:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <MX_TIM4_Init+0xe8>)
 8001e7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e82:	223f      	movs	r2, #63	; 0x3f
 8001e84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e9e:	4823      	ldr	r0, [pc, #140]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001ea0:	f005 fd7e 	bl	80079a0 <HAL_TIM_Base_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001eaa:	f7fe fe69 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481c      	ldr	r0, [pc, #112]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001ebc:	f006 fa34 	bl	8008328 <HAL_TIM_ConfigClockSource>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ec6:	f7fe fe5b 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eca:	4818      	ldr	r0, [pc, #96]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001ecc:	f005 fdbf 	bl	8007a4e <HAL_TIM_PWM_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ed6:	f7fe fe53 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001eea:	f006 ff7d 	bl	8008de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ef4:	f7fe fe44 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef8:	2360      	movs	r3, #96	; 0x60
 8001efa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001f10:	f006 f8f6 	bl	8008100 <HAL_TIM_PWM_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f1a:	f7fe fe31 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <MX_TIM4_Init+0xe4>)
 8001f20:	f000 f86c 	bl	8001ffc <HAL_TIM_MspPostInit>

}
 8001f24:	bf00      	nop
 8001f26:	3738      	adds	r7, #56	; 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	24000d18 	.word	0x24000d18
 8001f30:	40000800 	.word	0x40000800

08001f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d117      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2101      	movs	r1, #1
 8001f68:	201c      	movs	r0, #28
 8001f6a:	f001 fde0 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f001 fdf7 	bl	8003b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f74:	e038      	b.n	8001fe8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_MspInit+0xc0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d117      	bne.n	8001fb0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	201d      	movs	r0, #29
 8001fa4:	f001 fdc3 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa8:	201d      	movs	r0, #29
 8001faa:	f001 fdda 	bl	8003b62 <HAL_NVIC_EnableIRQ>
}
 8001fae:	e01b      	b.n	8001fe8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_TIM_Base_MspInit+0xc4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d116      	bne.n	8001fe8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_TIM_Base_MspInit+0xbc>)
 8001fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2101      	movs	r1, #1
 8001fdc:	201e      	movs	r0, #30
 8001fde:	f001 fda6 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fe2:	201e      	movs	r0, #30
 8001fe4:	f001 fdbd 	bl	8003b62 <HAL_NVIC_EnableIRQ>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800

08001ffc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d11f      	bne.n	800205e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800203c:	2308      	movs	r3, #8
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800204c:	2301      	movs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	482a      	ldr	r0, [pc, #168]	; (8002100 <HAL_TIM_MspPostInit+0x104>)
 8002058:	f001 fd9e 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800205c:	e049      	b.n	80020f2 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_TIM_MspPostInit+0x108>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11f      	bne.n	80020a8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002086:	2310      	movs	r3, #16
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002096:	2302      	movs	r3, #2
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4819      	ldr	r0, [pc, #100]	; (8002108 <HAL_TIM_MspPostInit+0x10c>)
 80020a2:	f001 fd79 	bl	8003b98 <HAL_GPIO_Init>
}
 80020a6:	e024      	b.n	80020f2 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_TIM_MspPostInit+0x110>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11f      	bne.n	80020f2 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_MspPostInit+0x100>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e2:	2302      	movs	r3, #2
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <HAL_TIM_MspPostInit+0x114>)
 80020ee:	f001 fd53 	bl	8003b98 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	58024400 	.word	0x58024400
 8002100:	58020000 	.word	0x58020000
 8002104:	40000400 	.word	0x40000400
 8002108:	58020400 	.word	0x58020400
 800210c:	40000800 	.word	0x40000800
 8002110:	58020c00 	.word	0x58020c00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002118:	f7ff fd22 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	; (8002154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	; (8002160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f006 ff0b 	bl	8008f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7fe fc03 	bl	8000950 <main>
  bx  lr
 800214a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800214c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002150:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002154:	24000390 	.word	0x24000390
  ldr r2, =_sidata
 8002158:	08009a88 	.word	0x08009a88
  ldr r2, =_sbss
 800215c:	24000390 	.word	0x24000390
  ldr r4, =_ebss
 8002160:	24000ea0 	.word	0x24000ea0

08002164 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC3_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216e:	2003      	movs	r0, #3
 8002170:	f001 fcd2 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002174:	f002 fd56 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_Init+0x68>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	4913      	ldr	r1, [pc, #76]	; (80021d4 <HAL_Init+0x6c>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_Init+0x68>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_Init+0x6c>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_Init+0x70>)
 80021aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_Init+0x74>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 f814 	bl	80021e0 <HAL_InitTick>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e002      	b.n	80021c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021c2:	f7ff fc53 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	58024400 	.word	0x58024400
 80021d4:	08009200 	.word	0x08009200
 80021d8:	24000334 	.word	0x24000334
 80021dc:	24000330 	.word	0x24000330

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_InitTick+0x60>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e021      	b.n	8002238 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_InitTick+0x64>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_InitTick+0x60>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fcb7 	bl	8003b7e <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f001 fc81 	bl	8003b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_InitTick+0x68>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2400033c 	.word	0x2400033c
 8002244:	24000330 	.word	0x24000330
 8002248:	24000338 	.word	0x24000338

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	2400033c 	.word	0x2400033c
 8002270:	24000d64 	.word	0x24000d64

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	24000d64 	.word	0x24000d64

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff ffee 	bl	8002274 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffde 	bl	8002274 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2400033c 	.word	0x2400033c

080022d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetREVID+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0c1b      	lsrs	r3, r3, #16
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	5c001000 	.word	0x5c001000

080022ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3360      	adds	r3, #96	; 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	431a      	orrs	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b087      	sub	sp, #28
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3360      	adds	r3, #96	; 0x60
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]
  }
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002422:	b480      	push	{r7}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3330      	adds	r3, #48	; 0x30
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	211f      	movs	r1, #31
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 011f 	and.w	r1, r3, #31
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800247a:	b480      	push	{r7}
 800247c:	b087      	sub	sp, #28
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3314      	adds	r3, #20
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0e5b      	lsrs	r3, r3, #25
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0d1b      	lsrs	r3, r3, #20
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2107      	movs	r1, #7
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0d1b      	lsrs	r3, r3, #20
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	431a      	orrs	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0318 	and.w	r3, r3, #24
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024f4:	40d9      	lsrs	r1, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	400b      	ands	r3, r1
 80024fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024fe:	431a      	orrs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	000fffff 	.word	0x000fffff

08002518 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 031f 	and.w	r3, r3, #31
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <LL_ADC_DisableDeepPowerDown+0x20>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6093      	str	r3, [r2, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	5fffffc0 	.word	0x5fffffc0

08002574 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002588:	d101      	bne.n	800258e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	6fffffc0 	.word	0x6fffffc0

080025c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <LL_ADC_Enable+0x24>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	7fffffc0 	.word	0x7fffffc0

08002614 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <LL_ADC_IsEnabled+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_ADC_IsEnabled+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <LL_ADC_REG_StartConversion+0x24>)
 800264a:	4013      	ands	r3, r2
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	7fffffc0 	.word	0x7fffffc0

08002664 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d101      	bne.n	800267c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d101      	bne.n	80026a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e18f      	b.n	80029ea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7fd fe77 	bl	80003cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff3f 	bl	8002574 <LL_ADC_IsDeepPowerDownEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff25 	bl	8002550 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff5a 	bl	80025c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d114      	bne.n	8002740 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff3e 	bl	800259c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002720:	4b87      	ldr	r3, [pc, #540]	; (8002940 <HAL_ADC_Init+0x290>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a87      	ldr	r2, [pc, #540]	; (8002944 <HAL_ADC_Init+0x294>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	3301      	adds	r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002732:	e002      	b.n	800273a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3b01      	subs	r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff3d 	bl	80025c4 <LL_ADC_IsInternalRegulatorEnabled>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff77 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002776:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 8129 	bne.w	80029d8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 8125 	bne.w	80029d8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff36 	bl	8002614 <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d136      	bne.n	800281c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_ADC_Init+0x298>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_ADC_Init+0x112>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_ADC_Init+0x29c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10e      	bne.n	80027e0 <HAL_ADC_Init+0x130>
 80027c2:	4861      	ldr	r0, [pc, #388]	; (8002948 <HAL_ADC_Init+0x298>)
 80027c4:	f7ff ff26 	bl	8002614 <LL_ADC_IsEnabled>
 80027c8:	4604      	mov	r4, r0
 80027ca:	4860      	ldr	r0, [pc, #384]	; (800294c <HAL_ADC_Init+0x29c>)
 80027cc:	f7ff ff22 	bl	8002614 <LL_ADC_IsEnabled>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4323      	orrs	r3, r4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e008      	b.n	80027f2 <HAL_ADC_Init+0x142>
 80027e0:	485b      	ldr	r0, [pc, #364]	; (8002950 <HAL_ADC_Init+0x2a0>)
 80027e2:	f7ff ff17 	bl	8002614 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d012      	beq.n	800281c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_ADC_Init+0x298>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_ADC_Init+0x15a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_ADC_Init+0x29c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x15e>
 800280a:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_ADC_Init+0x2a4>)
 800280c:	e000      	b.n	8002810 <HAL_ADC_Init+0x160>
 800280e:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_ADC_Init+0x2a8>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7ff fd68 	bl	80022ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800281c:	f7ff fd5a 	bl	80022d4 <HAL_GetREVID>
 8002820:	4603      	mov	r3, r0
 8002822:	f241 0203 	movw	r2, #4099	; 0x1003
 8002826:	4293      	cmp	r3, r2
 8002828:	d914      	bls.n	8002854 <HAL_ADC_Init+0x1a4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d110      	bne.n	8002854 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7d5b      	ldrb	r3, [r3, #21]
 8002836:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800283c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002842:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7f1b      	ldrb	r3, [r3, #28]
 8002848:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800284a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800284c:	f043 030c 	orr.w	r3, r3, #12
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e00d      	b.n	8002870 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7d5b      	ldrb	r3, [r3, #21]
 8002858:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002864:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7f1b      	ldrb	r3, [r3, #28]
 800286a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7f1b      	ldrb	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	3b01      	subs	r3, #1
 800287e:	045b      	lsls	r3, r3, #17
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_ADC_Init+0x2ac>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	69b9      	ldr	r1, [r7, #24]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fed2 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 80028c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fedf 	bl	800268a <LL_ADC_INJ_IsConversionOngoing>
 80028cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d15f      	bne.n	8002994 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d15c      	bne.n	8002994 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7d1b      	ldrb	r3, [r3, #20]
 80028de:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_ADC_Init+0x2b0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002902:	2b01      	cmp	r3, #1
 8002904:	d130      	bne.n	8002968 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_ADC_Init+0x2b4>)
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800291a:	3a01      	subs	r2, #1
 800291c:	0411      	lsls	r1, r2, #16
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800292e:	430a      	orrs	r2, r1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	611a      	str	r2, [r3, #16]
 800293c:	e01c      	b.n	8002978 <HAL_ADC_Init+0x2c8>
 800293e:	bf00      	nop
 8002940:	24000330 	.word	0x24000330
 8002944:	053e2d63 	.word	0x053e2d63
 8002948:	40022000 	.word	0x40022000
 800294c:	40022100 	.word	0x40022100
 8002950:	58026000 	.word	0x58026000
 8002954:	40022300 	.word	0x40022300
 8002958:	58026300 	.word	0x58026300
 800295c:	fff0c003 	.word	0xfff0c003
 8002960:	ffffbffc 	.word	0xffffbffc
 8002964:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fde2 	bl	8003558 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10c      	bne.n	80029b6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f023 010f 	bic.w	r1, r3, #15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	1e5a      	subs	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
 80029b4:	e007      	b.n	80029c6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 020f 	bic.w	r2, r2, #15
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
 80029d6:	e007      	b.n	80029e8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5c      	ldr	r2, [pc, #368]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_Start+0x1c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <HAL_ADC_Start+0x184>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_Start+0x20>
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_ADC_Start+0x188>)
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_Start+0x22>
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <HAL_ADC_Start+0x18c>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd7e 	bl	8002518 <LL_ADC_GetMultimode>
 8002a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fe1e 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 809a 	bne.w	8002b64 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Start+0x4a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e095      	b.n	8002b6a <HAL_ADC_Start+0x176>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fcfc 	bl	8003444 <ADC_Enable>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 8081 	bne.w	8002b5a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_ADC_Start+0x190>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a42      	ldr	r2, [pc, #264]	; (8002b78 <HAL_ADC_Start+0x184>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d002      	beq.n	8002a78 <HAL_ADC_Start+0x84>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_Start+0x86>
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d002      	beq.n	8002a88 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f023 0206 	bic.w	r2, r3, #6
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	659a      	str	r2, [r3, #88]	; 0x58
 8002aae:	e002      	b.n	8002ab6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	221c      	movs	r2, #28
 8002abc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_ADC_Start+0x184>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d002      	beq.n	8002ad6 <HAL_ADC_Start+0xe2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADC_Start+0xe4>
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d008      	beq.n	8002af2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d002      	beq.n	8002af2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d114      	bne.n	8002b1c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd91 	bl	800263c <LL_ADC_REG_StartConversion>
 8002b1a:	e025      	b.n	8002b68 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_ADC_Start+0x184>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_Start+0x144>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_Start+0x146>
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_ADC_Start+0x180>)
 8002b3a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00f      	beq.n	8002b68 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
 8002b58:	e006      	b.n	8002b68 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b62:	e001      	b.n	8002b68 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40022100 	.word	0x40022100
 8002b7c:	40022300 	.word	0x40022300
 8002b80:	58026300 	.word	0x58026300
 8002b84:	fffff0fe 	.word	0xfffff0fe

08002b88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a72      	ldr	r2, [pc, #456]	; (8002d60 <HAL_ADC_PollForConversion+0x1d8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_ADC_PollForConversion+0x1e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a70      	ldr	r2, [pc, #448]	; (8002d64 <HAL_ADC_PollForConversion+0x1dc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_PollForConversion+0x22>
 8002ba6:	4b70      	ldr	r3, [pc, #448]	; (8002d68 <HAL_ADC_PollForConversion+0x1e0>)
 8002ba8:	e000      	b.n	8002bac <HAL_ADC_PollForConversion+0x24>
 8002baa:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <HAL_ADC_PollForConversion+0x1e4>)
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fcb3 	bl	8002518 <LL_ADC_GetMultimode>
 8002bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d102      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e037      	b.n	8002c32 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d002      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d111      	bne.n	8002bf8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0b1      	b.n	8002d56 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002bf6:	e01c      	b.n	8002c32 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_ADC_PollForConversion+0x1d8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_PollForConversion+0x84>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_ADC_PollForConversion+0x1dc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x88>
 8002c0c:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_ADC_PollForConversion+0x1e0>)
 8002c0e:	e000      	b.n	8002c12 <HAL_ADC_PollForConversion+0x8a>
 8002c10:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <HAL_ADC_PollForConversion+0x1e4>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fc8e 	bl	8002534 <LL_ADC_GetMultiDMATransfer>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e093      	b.n	8002d56 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c2e:	2304      	movs	r3, #4
 8002c30:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c32:	f7ff fb1f 	bl	8002274 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c38:	e021      	b.n	8002c7e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d01d      	beq.n	8002c7e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c42:	f7ff fb17 	bl	8002274 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <HAL_ADC_PollForConversion+0xd0>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d112      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e06b      	b.n	8002d56 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0d6      	beq.n	8002c3a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fbad 	bl	80023fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01c      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7d5b      	ldrb	r3, [r3, #21]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d111      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_ADC_PollForConversion+0x1dc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d002      	beq.n	8002cf2 <HAL_ADC_PollForConversion+0x16a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_PollForConversion+0x16c>
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_ADC_PollForConversion+0x1d8>)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d008      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d002      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d104      	bne.n	8002d18 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e00c      	b.n	8002d32 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_ADC_PollForConversion+0x1dc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d002      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x1a0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_PollForConversion+0x1a2>
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_ADC_PollForConversion+0x1d8>)
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e008      	b.n	8002d54 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	220c      	movs	r2, #12
 8002d52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022100 	.word	0x40022100
 8002d68:	40022300 	.word	0x40022300
 8002d6c:	58026300 	.word	0x58026300

08002d70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b0a1      	sub	sp, #132	; 0x84
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_ADC_ConfigChannel+0x1b0>)
 8002da6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x2a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e32e      	b.n	8003414 <HAL_ADC_ConfigChannel+0x688>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fc4e 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 8313 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db2c      	blt.n	8002e32 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d108      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x6a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	e016      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x98>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e003      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	69d1      	ldr	r1, [r2, #28]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f7ff faef 	bl	8002422 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc0b 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002e4e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fc18 	bl	800268a <LL_ADC_INJ_IsConversionOngoing>
 8002e5a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80b8 	bne.w	8002fd4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 80b4 	bne.w	8002fd4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f7ff fafe 	bl	800247a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_ADC_ConfigChannel+0x1b4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x118>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	e01d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x154>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x13e>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	e00a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x154>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d02c      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef8:	f7ff fa2c 	bl	8002354 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	7e5b      	ldrb	r3, [r3, #25]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x186>
 8002f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f10:	e000      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x188>
 8002f12:	2300      	movs	r3, #0
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fa56 	bl	80023c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7e1b      	ldrb	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1a4>
 8002f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1a6>
 8002f30:	2300      	movs	r3, #0
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7ff fa2e 	bl	8002394 <LL_ADC_SetDataRightShift>
 8002f38:	e04c      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x248>
 8002f3a:	bf00      	nop
 8002f3c:	47ff0000 	.word	0x47ff0000
 8002f40:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	069b      	lsls	r3, r3, #26
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	069b      	lsls	r3, r3, #26
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f8a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	069b      	lsls	r3, r3, #26
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fd2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fb1b 	bl	8002614 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8211 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f7ff fa6c 	bl	80024d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4aa1      	ldr	r2, [pc, #644]	; (8003284 <HAL_ADC_ConfigChannel+0x4f8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f040 812e 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_ADC_ConfigChannel+0x2a0>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2b09      	cmp	r3, #9
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e019      	b.n	8003060 <HAL_ADC_ConfigChannel+0x2d4>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e003      	b.n	8003050 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b09      	cmp	r3, #9
 8003058:	bf94      	ite	ls
 800305a:	2301      	movls	r3, #1
 800305c:	2300      	movhi	r3, #0
 800305e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003060:	2b00      	cmp	r3, #0
 8003062:	d079      	beq.n	8003158 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x2f4>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	069b      	lsls	r3, r3, #26
 800307a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307e:	e015      	b.n	80030ac <HAL_ADC_ConfigChannel+0x320>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800308e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003090:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	069b      	lsls	r3, r3, #26
 80030a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x340>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	e017      	b.n	80030fc <HAL_ADC_ConfigChannel+0x370>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x396>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	051b      	lsls	r3, r3, #20
 8003120:	e018      	b.n	8003154 <HAL_ADC_ConfigChannel+0x3c8>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	430b      	orrs	r3, r1
 8003156:	e07e      	b.n	8003256 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x3e8>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	3301      	adds	r3, #1
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003172:	e015      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x414>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800318c:	2320      	movs	r3, #32
 800318e:	e003      	b.n	8003198 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x434>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	e017      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x464>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	61bb      	str	r3, [r7, #24]
  return result;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_ADC_ConfigChannel+0x490>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	3b1e      	subs	r3, #30
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321a:	e01b      	b.n	8003254 <HAL_ADC_ConfigChannel+0x4c8>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	60fb      	str	r3, [r7, #12]
  return result;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e003      	b.n	8003240 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f003 021f 	and.w	r2, r3, #31
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	3b1e      	subs	r3, #30
 800324e:	051b      	lsls	r3, r3, #20
 8003250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003254:	430b      	orrs	r3, r1
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	4619      	mov	r1, r3
 800325c:	f7ff f90d 	bl	800247a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f280 80cf 	bge.w	8003408 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_ADC_ConfigChannel+0x4fc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADC_ConfigChannel+0x4f2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_ADC_ConfigChannel+0x500>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x508>
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_ADC_ConfigChannel+0x504>)
 8003280:	e009      	b.n	8003296 <HAL_ADC_ConfigChannel+0x50a>
 8003282:	bf00      	nop
 8003284:	47ff0000 	.word	0x47ff0000
 8003288:	40022000 	.word	0x40022000
 800328c:	40022100 	.word	0x40022100
 8003290:	40022300 	.word	0x40022300
 8003294:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_ADC_ConfigChannel+0x690>)
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f84e 	bl	8002338 <LL_ADC_GetCommonPathInternalCh>
 800329c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5f      	ldr	r2, [pc, #380]	; (8003420 <HAL_ADC_ConfigChannel+0x694>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x526>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <HAL_ADC_ConfigChannel+0x698>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10e      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x544>
 80032b2:	485b      	ldr	r0, [pc, #364]	; (8003420 <HAL_ADC_ConfigChannel+0x694>)
 80032b4:	f7ff f9ae 	bl	8002614 <LL_ADC_IsEnabled>
 80032b8:	4604      	mov	r4, r0
 80032ba:	485a      	ldr	r0, [pc, #360]	; (8003424 <HAL_ADC_ConfigChannel+0x698>)
 80032bc:	f7ff f9aa 	bl	8002614 <LL_ADC_IsEnabled>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4323      	orrs	r3, r4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e008      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x556>
 80032d0:	4855      	ldr	r0, [pc, #340]	; (8003428 <HAL_ADC_ConfigChannel+0x69c>)
 80032d2:	f7ff f99f 	bl	8002614 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d07d      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_ADC_ConfigChannel+0x6a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d130      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x5c6>
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12b      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_ADC_ConfigChannel+0x69c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	f040 8081 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a45      	ldr	r2, [pc, #276]	; (8003420 <HAL_ADC_ConfigChannel+0x694>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_ADC_ConfigChannel+0x58e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_ADC_ConfigChannel+0x698>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x592>
 800331a:	4a45      	ldr	r2, [pc, #276]	; (8003430 <HAL_ADC_ConfigChannel+0x6a4>)
 800331c:	e000      	b.n	8003320 <HAL_ADC_ConfigChannel+0x594>
 800331e:	4a3f      	ldr	r2, [pc, #252]	; (800341c <HAL_ADC_ConfigChannel+0x690>)
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fff2 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_ADC_ConfigChannel+0x6a8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	4a40      	ldr	r2, [pc, #256]	; (8003438 <HAL_ADC_ConfigChannel+0x6ac>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	3301      	adds	r3, #1
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003342:	e002      	b.n	800334a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3b01      	subs	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f9      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003350:	e05a      	b.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a39      	ldr	r2, [pc, #228]	; (800343c <HAL_ADC_ConfigChannel+0x6b0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d11e      	bne.n	800339a <HAL_ADC_ConfigChannel+0x60e>
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d119      	bne.n	800339a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <HAL_ADC_ConfigChannel+0x69c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d14b      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <HAL_ADC_ConfigChannel+0x694>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x5f8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a29      	ldr	r2, [pc, #164]	; (8003424 <HAL_ADC_ConfigChannel+0x698>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x5fc>
 8003384:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <HAL_ADC_ConfigChannel+0x6a4>)
 8003386:	e000      	b.n	800338a <HAL_ADC_ConfigChannel+0x5fe>
 8003388:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_ADC_ConfigChannel+0x690>)
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fe ffbd 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003398:	e036      	b.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_ADC_ConfigChannel+0x6b4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d131      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d12c      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_ADC_ConfigChannel+0x69c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d127      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_ADC_ConfigChannel+0x694>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x640>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_ADC_ConfigChannel+0x698>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x644>
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_ADC_ConfigChannel+0x6a4>)
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x646>
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_ADC_ConfigChannel+0x690>)
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7fe ff99 	bl	8002312 <LL_ADC_SetCommonPathInternalCh>
 80033e0:	e012      	b.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033f4:	e008      	b.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003410:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003414:	4618      	mov	r0, r3
 8003416:	3784      	adds	r7, #132	; 0x84
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	58026300 	.word	0x58026300
 8003420:	40022000 	.word	0x40022000
 8003424:	40022100 	.word	0x40022100
 8003428:	58026000 	.word	0x58026000
 800342c:	cb840000 	.word	0xcb840000
 8003430:	40022300 	.word	0x40022300
 8003434:	24000330 	.word	0x24000330
 8003438:	053e2d63 	.word	0x053e2d63
 800343c:	c7520000 	.word	0xc7520000
 8003440:	cfb80000 	.word	0xcfb80000

08003444 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8df 	bl	8002614 <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d16e      	bne.n	800353a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <ADC_Enable+0x100>)
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e05a      	b.n	800353c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f8ae 	bl	80025ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003490:	f7fe fef0 	bl	8002274 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <ADC_Enable+0x104>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <ADC_Enable+0x66>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <ADC_Enable+0x108>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <ADC_Enable+0x6a>
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <ADC_Enable+0x10c>)
 80034ac:	e000      	b.n	80034b0 <ADC_Enable+0x6c>
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <ADC_Enable+0x110>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f831 	bl	8002518 <LL_ADC_GetMultimode>
 80034b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <ADC_Enable+0x108>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d002      	beq.n	80034c8 <ADC_Enable+0x84>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e000      	b.n	80034ca <ADC_Enable+0x86>
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <ADC_Enable+0x104>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02c      	beq.n	800352c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d130      	bne.n	800353a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d8:	e028      	b.n	800352c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f898 	bl	8002614 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f87c 	bl	80025ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f4:	f7fe febe 	bl	8002274 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d914      	bls.n	800352c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d00d      	beq.n	800352c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d1cf      	bne.n	80034da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	8000003f 	.word	0x8000003f
 8003548:	40022000 	.word	0x40022000
 800354c:	40022100 	.word	0x40022100
 8003550:	40022300 	.word	0x40022300
 8003554:	58026300 	.word	0x58026300

08003558 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <ADC_ConfigureBoostMode+0x1f8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <ADC_ConfigureBoostMode+0x1c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a79      	ldr	r2, [pc, #484]	; (8003754 <ADC_ConfigureBoostMode+0x1fc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d109      	bne.n	8003588 <ADC_ConfigureBoostMode+0x30>
 8003574:	4b78      	ldr	r3, [pc, #480]	; (8003758 <ADC_ConfigureBoostMode+0x200>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <ADC_ConfigureBoostMode+0x42>
 8003588:	4b74      	ldr	r3, [pc, #464]	; (800375c <ADC_ConfigureBoostMode+0x204>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800359e:	f001 fcbb 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 80035a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ac:	d010      	beq.n	80035d0 <ADC_ConfigureBoostMode+0x78>
 80035ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035b2:	d873      	bhi.n	800369c <ADC_ConfigureBoostMode+0x144>
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d002      	beq.n	80035c0 <ADC_ConfigureBoostMode+0x68>
 80035ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035be:	d16d      	bne.n	800369c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	60fb      	str	r3, [r7, #12]
        break;
 80035ce:	e068      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	60fb      	str	r3, [r7, #12]
        break;
 80035d6:	e064      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80035d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f002 feea 	bl	80063b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80035e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035ee:	d051      	beq.n	8003694 <ADC_ConfigureBoostMode+0x13c>
 80035f0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035f4:	d854      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 80035f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035fa:	d047      	beq.n	800368c <ADC_ConfigureBoostMode+0x134>
 80035fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003600:	d84e      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 8003602:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003606:	d03d      	beq.n	8003684 <ADC_ConfigureBoostMode+0x12c>
 8003608:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800360c:	d848      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003612:	d033      	beq.n	800367c <ADC_ConfigureBoostMode+0x124>
 8003614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003618:	d842      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 800361a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800361e:	d029      	beq.n	8003674 <ADC_ConfigureBoostMode+0x11c>
 8003620:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003624:	d83c      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 8003626:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800362a:	d01a      	beq.n	8003662 <ADC_ConfigureBoostMode+0x10a>
 800362c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003630:	d836      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 8003632:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003636:	d014      	beq.n	8003662 <ADC_ConfigureBoostMode+0x10a>
 8003638:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800363c:	d830      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003642:	d00e      	beq.n	8003662 <ADC_ConfigureBoostMode+0x10a>
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	d82a      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 800364a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800364e:	d008      	beq.n	8003662 <ADC_ConfigureBoostMode+0x10a>
 8003650:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003654:	d824      	bhi.n	80036a0 <ADC_ConfigureBoostMode+0x148>
 8003656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800365a:	d002      	beq.n	8003662 <ADC_ConfigureBoostMode+0x10a>
 800365c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003660:	d11e      	bne.n	80036a0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	60fb      	str	r3, [r7, #12]
        break;
 8003672:	e016      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
        break;
 800367a:	e012      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	60fb      	str	r3, [r7, #12]
        break;
 8003682:	e00e      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	60fb      	str	r3, [r7, #12]
        break;
 800368a:	e00a      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	09db      	lsrs	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
        break;
 8003692:	e006      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	60fb      	str	r3, [r7, #12]
        break;
 800369a:	e002      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80036a0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80036a2:	f7fe fe17 	bl	80022d4 <HAL_GetREVID>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d815      	bhi.n	80036dc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <ADC_ConfigureBoostMode+0x208>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d908      	bls.n	80036ca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036c8:	e03e      	b.n	8003748 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d8:	609a      	str	r2, [r3, #8]
}
 80036da:	e035      	b.n	8003748 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <ADC_ConfigureBoostMode+0x20c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d808      	bhi.n	80036fc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036f8:	609a      	str	r2, [r3, #8]
}
 80036fa:	e025      	b.n	8003748 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <ADC_ConfigureBoostMode+0x210>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d80a      	bhi.n	800371a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	e016      	b.n	8003748 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <ADC_ConfigureBoostMode+0x214>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d80a      	bhi.n	8003738 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	e007      	b.n	8003748 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40022000 	.word	0x40022000
 8003754:	40022100 	.word	0x40022100
 8003758:	40022300 	.word	0x40022300
 800375c:	58026300 	.word	0x58026300
 8003760:	01312d00 	.word	0x01312d00
 8003764:	005f5e10 	.word	0x005f5e10
 8003768:	00bebc20 	.word	0x00bebc20
 800376c:	017d7840 	.word	0x017d7840

08003770 <LL_ADC_IsEnabled>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <LL_ADC_IsEnabled+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_ADC_IsEnabled+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_REG_IsConversionOngoing>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d101      	bne.n	80037ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b09f      	sub	sp, #124	; 0x7c
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0be      	b.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d102      	bne.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037f4:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	e001      	b.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e09d      	b.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ffb9 	bl	8003796 <LL_ADC_REG_IsConversionOngoing>
 8003824:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ffb3 	bl	8003796 <LL_ADC_REG_IsConversionOngoing>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d17f      	bne.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003838:	2b00      	cmp	r3, #0
 800383a:	d17c      	bne.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a47      	ldr	r2, [pc, #284]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a46      	ldr	r2, [pc, #280]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003850:	4b45      	ldr	r3, [pc, #276]	; (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003852:	e000      	b.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d039      	beq.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	431a      	orrs	r2, r3
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003870:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3a      	ldr	r2, [pc, #232]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10e      	bne.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003886:	4836      	ldr	r0, [pc, #216]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003888:	f7ff ff72 	bl	8003770 <LL_ADC_IsEnabled>
 800388c:	4604      	mov	r4, r0
 800388e:	4835      	ldr	r0, [pc, #212]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003890:	f7ff ff6e 	bl	8003770 <LL_ADC_IsEnabled>
 8003894:	4603      	mov	r3, r0
 8003896:	4323      	orrs	r3, r4
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80038a4:	4832      	ldr	r0, [pc, #200]	; (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038a6:	f7ff ff63 	bl	8003770 <LL_ADC_IsEnabled>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d047      	beq.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038d2:	e03a      	b.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10e      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80038f4:	481a      	ldr	r0, [pc, #104]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038f6:	f7ff ff3b 	bl	8003770 <LL_ADC_IsEnabled>
 80038fa:	4604      	mov	r4, r0
 80038fc:	4819      	ldr	r0, [pc, #100]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038fe:	f7ff ff37 	bl	8003770 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	4323      	orrs	r3, r4
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e008      	b.n	8003924 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003912:	4817      	ldr	r0, [pc, #92]	; (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003914:	f7ff ff2c 	bl	8003770 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800392e:	4013      	ands	r3, r2
 8003930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003932:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003934:	e009      	b.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003948:	e000      	b.n	800394c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800394a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003954:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003958:	4618      	mov	r0, r3
 800395a:	377c      	adds	r7, #124	; 0x7c
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	40022000 	.word	0x40022000
 8003964:	40022100 	.word	0x40022100
 8003968:	40022300 	.word	0x40022300
 800396c:	58026300 	.word	0x58026300
 8003970:	58026000 	.word	0x58026000
 8003974:	fffff0e0 	.word	0xfffff0e0

08003978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <__NVIC_SetPriorityGrouping+0x40>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003994:	4013      	ands	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <__NVIC_SetPriorityGrouping+0x40>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00
 80039bc:	05fa0000 	.word	0x05fa0000

080039c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <__NVIC_GetPriorityGrouping+0x18>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
         );
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae4:	d301      	bcc.n	8003aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <SysTick_Config+0x40>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af2:	210f      	movs	r1, #15
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f7ff ff8e 	bl	8003a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <SysTick_Config+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <SysTick_Config+0x40>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff29 	bl	8003978 <__NVIC_SetPriorityGrouping>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b3c:	f7ff ff40 	bl	80039c0 <__NVIC_GetPriorityGrouping>
 8003b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7ff ff90 	bl	8003a6c <NVIC_EncodePriority>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff5f 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff33 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ffa4 	bl	8003ad4 <SysTick_Config>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_GPIO_Init+0x234>)
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003baa:	e194      	b.n	8003ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8186 	beq.w	8003ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x44>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80e0 	beq.w	8003ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d16:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d2e:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <HAL_GPIO_Init+0x23c>)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	3302      	adds	r3, #2
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <HAL_GPIO_Init+0x240>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d052      	beq.n	8003e00 <HAL_GPIO_Init+0x268>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <HAL_GPIO_Init+0x244>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_GPIO_Init+0x22e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_GPIO_Init+0x248>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02b      	beq.n	8003dc2 <HAL_GPIO_Init+0x22a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_GPIO_Init+0x24c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x226>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_GPIO_Init+0x250>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x222>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_GPIO_Init+0x254>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x21e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_GPIO_Init+0x258>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_GPIO_Init+0x25c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x216>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_GPIO_Init+0x260>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x212>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_GPIO_Init+0x264>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x20e>
 8003da2:	2309      	movs	r3, #9
 8003da4:	e02d      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003da6:	230a      	movs	r3, #10
 8003da8:	e02b      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003daa:	2308      	movs	r3, #8
 8003dac:	e029      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e027      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003db2:	2306      	movs	r3, #6
 8003db4:	e025      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003db6:	2305      	movs	r3, #5
 8003db8:	e023      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e021      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e01f      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e01d      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01b      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dca:	bf00      	nop
 8003dcc:	58000080 	.word	0x58000080
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58000400 	.word	0x58000400
 8003dd8:	58020000 	.word	0x58020000
 8003ddc:	58020400 	.word	0x58020400
 8003de0:	58020800 	.word	0x58020800
 8003de4:	58020c00 	.word	0x58020c00
 8003de8:	58021000 	.word	0x58021000
 8003dec:	58021400 	.word	0x58021400
 8003df0:	58021800 	.word	0x58021800
 8003df4:	58021c00 	.word	0x58021c00
 8003df8:	58022000 	.word	0x58022000
 8003dfc:	58022400 	.word	0x58022400
 8003e00:	2300      	movs	r3, #0
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	f002 0203 	and.w	r2, r2, #3
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	4093      	lsls	r3, r2
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e12:	4938      	ldr	r1, [pc, #224]	; (8003ef4 <HAL_GPIO_Init+0x35c>)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f ae63 	bne.w	8003bac <HAL_GPIO_Init+0x14>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	3724      	adds	r7, #36	; 0x24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	58000400 	.word	0x58000400

08003ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e001      	b.n	8003f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
 8003f34:	4613      	mov	r3, r2
 8003f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f44:	e003      	b.n	8003f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	041a      	lsls	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	619a      	str	r2, [r3, #24]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fc89 	bl	8000898 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_PWREx_ConfigSupply+0x70>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d00a      	beq.n	8003fba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <HAL_PWREx_ConfigSupply+0x70>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01f      	b.n	8003ff6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e01d      	b.n	8003ff6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_PWREx_ConfigSupply+0x70>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f023 0207 	bic.w	r2, r3, #7
 8003fc2:	490f      	ldr	r1, [pc, #60]	; (8004000 <HAL_PWREx_ConfigSupply+0x70>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fca:	f7fe f953 	bl	8002274 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fd0:	e009      	b.n	8003fe6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fd2:	f7fe f94f 	bl	8002274 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fe0:	d901      	bls.n	8003fe6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e007      	b.n	8003ff6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_PWREx_ConfigSupply+0x70>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	58024800 	.word	0x58024800

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f000 bc48 	b.w	80048a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8088 	beq.w	8004136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004026:	4b99      	ldr	r3, [pc, #612]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004030:	4b96      	ldr	r3, [pc, #600]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	2b10      	cmp	r3, #16
 800403a:	d007      	beq.n	800404c <HAL_RCC_OscConfig+0x48>
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	2b18      	cmp	r3, #24
 8004040:	d111      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	4b8f      	ldr	r3, [pc, #572]	; (800428c <HAL_RCC_OscConfig+0x288>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d06d      	beq.n	8004134 <HAL_RCC_OscConfig+0x130>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d169      	bne.n	8004134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f000 bc21 	b.w	80048a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x7a>
 8004070:	4b86      	ldr	r3, [pc, #536]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a85      	ldr	r2, [pc, #532]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e02e      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x9c>
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a80      	ldr	r2, [pc, #512]	; (800428c <HAL_RCC_OscConfig+0x288>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b7e      	ldr	r3, [pc, #504]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7d      	ldr	r2, [pc, #500]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0xc0>
 80040aa:	4b78      	ldr	r3, [pc, #480]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a77      	ldr	r2, [pc, #476]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b75      	ldr	r3, [pc, #468]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a74      	ldr	r2, [pc, #464]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040c4:	4b71      	ldr	r3, [pc, #452]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a70      	ldr	r2, [pc, #448]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b6e      	ldr	r3, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6d      	ldr	r2, [pc, #436]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe f8c6 	bl	8002274 <HAL_GetTick>
 80040e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fe f8c2 	bl	8002274 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e3d4      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040fe:	4b63      	ldr	r3, [pc, #396]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xe8>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fe f8b2 	bl	8002274 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fe f8ae 	bl	8002274 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e3c0      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004126:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x110>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80ca 	beq.w	80042d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004144:	4b51      	ldr	r3, [pc, #324]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800414c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <HAL_RCC_OscConfig+0x166>
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2b18      	cmp	r3, #24
 800415e:	d156      	bne.n	800420e <HAL_RCC_OscConfig+0x20a>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d151      	bne.n	800420e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416a:	4b48      	ldr	r3, [pc, #288]	; (800428c <HAL_RCC_OscConfig+0x288>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x17e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e392      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004182:	4b42      	ldr	r3, [pc, #264]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 0219 	bic.w	r2, r3, #25
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	493f      	ldr	r1, [pc, #252]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe f86e 	bl	8002274 <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe f86a 	bl	8002274 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e37c      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	f7fe f88b 	bl	80022d4 <HAL_GetREVID>
 80041be:	4603      	mov	r3, r0
 80041c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d817      	bhi.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d108      	bne.n	80041e2 <HAL_RCC_OscConfig+0x1de>
 80041d0:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e0:	e07a      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	031b      	lsls	r3, r3, #12
 80041f0:	4926      	ldr	r1, [pc, #152]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f6:	e06f      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x288>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	4921      	ldr	r1, [pc, #132]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800420c:	e064      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d047      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0219 	bic.w	r2, r3, #25
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	491a      	ldr	r1, [pc, #104]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe f824 	bl	8002274 <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fe f820 	bl	8002274 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e332      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424e:	f7fe f841 	bl	80022d4 <HAL_GetREVID>
 8004252:	4603      	mov	r3, r0
 8004254:	f241 0203 	movw	r2, #4099	; 0x1003
 8004258:	4293      	cmp	r3, r2
 800425a:	d819      	bhi.n	8004290 <HAL_RCC_OscConfig+0x28c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d108      	bne.n	8004276 <HAL_RCC_OscConfig+0x272>
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800426c:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RCC_OscConfig+0x288>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	e030      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	031b      	lsls	r3, r3, #12
 8004284:	4901      	ldr	r1, [pc, #4]	; (800428c <HAL_RCC_OscConfig+0x288>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
 800428a:	e025      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
 800428c:	58024400 	.word	0x58024400
 8004290:	4b9a      	ldr	r3, [pc, #616]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	4997      	ldr	r1, [pc, #604]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	e018      	b.n	80042d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a6:	4b95      	ldr	r3, [pc, #596]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a94      	ldr	r2, [pc, #592]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd ffdf 	bl	8002274 <HAL_GetTick>
 80042b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd ffdb 	bl	8002274 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e2ed      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042cc:	4b8b      	ldr	r3, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80a9 	beq.w	8004438 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042f0:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d007      	beq.n	800430c <HAL_RCC_OscConfig+0x308>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b18      	cmp	r3, #24
 8004300:	d13a      	bne.n	8004378 <HAL_RCC_OscConfig+0x374>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d135      	bne.n	8004378 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800430c:	4b7b      	ldr	r3, [pc, #492]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x320>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e2c1      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004324:	f7fd ffd6 	bl	80022d4 <HAL_GetREVID>
 8004328:	4603      	mov	r3, r0
 800432a:	f241 0203 	movw	r2, #4099	; 0x1003
 800432e:	4293      	cmp	r3, r2
 8004330:	d817      	bhi.n	8004362 <HAL_RCC_OscConfig+0x35e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	2b20      	cmp	r3, #32
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0x348>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004342:	4a6e      	ldr	r2, [pc, #440]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004348:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800434a:	e075      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800434c:	4b6b      	ldr	r3, [pc, #428]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	069b      	lsls	r3, r3, #26
 800435a:	4968      	ldr	r1, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004360:	e06a      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004362:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	4962      	ldr	r1, [pc, #392]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004376:	e05f      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d042      	beq.n	8004406 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004380:	4b5e      	ldr	r3, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd ff72 	bl	8002274 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004394:	f7fd ff6e 	bl	8002274 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e280      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a6:	4b55      	ldr	r3, [pc, #340]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043b2:	f7fd ff8f 	bl	80022d4 <HAL_GetREVID>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043bc:	4293      	cmp	r3, r2
 80043be:	d817      	bhi.n	80043f0 <HAL_RCC_OscConfig+0x3ec>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d108      	bne.n	80043da <HAL_RCC_OscConfig+0x3d6>
 80043c8:	4b4c      	ldr	r3, [pc, #304]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d6:	6053      	str	r3, [r2, #4]
 80043d8:	e02e      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	069b      	lsls	r3, r3, #26
 80043e8:	4944      	ldr	r1, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
 80043ee:	e023      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
 80043f0:	4b42      	ldr	r3, [pc, #264]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	493f      	ldr	r1, [pc, #252]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
 8004404:	e018      	b.n	8004438 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800440c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fd ff2f 	bl	8002274 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800441a:	f7fd ff2b 	bl	8002274 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e23d      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d036      	beq.n	80044b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d019      	beq.n	8004480 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fd ff0c 	bl	8002274 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7fd ff08 	bl	8002274 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e21a      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x45c>
 800447e:	e018      	b.n	80044b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004480:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fd fef2 	bl	8002274 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fd feee 	bl	8002274 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e200      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d039      	beq.n	8004532 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01c      	beq.n	8004500 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044d2:	f7fd fecf 	bl	8002274 <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044da:	f7fd fecb 	bl	8002274 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1dd      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x4d6>
 80044f8:	e01b      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004500:	4b9b      	ldr	r3, [pc, #620]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9a      	ldr	r2, [pc, #616]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800450c:	f7fd feb2 	bl	8002274 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004514:	f7fd feae 	bl	8002274 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1c0      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004526:	4b92      	ldr	r3, [pc, #584]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8081 	beq.w	8004642 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004540:	4b8c      	ldr	r3, [pc, #560]	; (8004774 <HAL_RCC_OscConfig+0x770>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a8b      	ldr	r2, [pc, #556]	; (8004774 <HAL_RCC_OscConfig+0x770>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800454c:	f7fd fe92 	bl	8002274 <HAL_GetTick>
 8004550:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fd fe8e 	bl	8002274 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1a0      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004566:	4b83      	ldr	r3, [pc, #524]	; (8004774 <HAL_RCC_OscConfig+0x770>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x584>
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e02d      	b.n	80045e4 <HAL_RCC_OscConfig+0x5e0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x5a6>
 8004590:	4b77      	ldr	r3, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a76      	ldr	r2, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b74      	ldr	r3, [pc, #464]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a73      	ldr	r2, [pc, #460]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x5e0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c8>
 80045b2:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x5e0>
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a67      	ldr	r2, [pc, #412]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a64      	ldr	r2, [pc, #400]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd fe42 	bl	8002274 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fd fe3e 	bl	8002274 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e14e      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800460a:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x5f0>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fd fe2c 	bl	8002274 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fd fe28 	bl	8002274 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e138      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004636:	4b4e      	ldr	r3, [pc, #312]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 812d 	beq.w	80048a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800464c:	4b48      	ldr	r3, [pc, #288]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004654:	2b18      	cmp	r3, #24
 8004656:	f000 80bd 	beq.w	80047d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b02      	cmp	r3, #2
 8004660:	f040 809e 	bne.w	80047a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fe00 	bl	8002274 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd fdfc 	bl	8002274 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e10e      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_OscConfig+0x774>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046a6:	0112      	lsls	r2, r2, #4
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4931      	ldr	r1, [pc, #196]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	628b      	str	r3, [r1, #40]	; 0x28
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	3b01      	subs	r3, #1
 80046b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	3b01      	subs	r3, #1
 80046c0:	025b      	lsls	r3, r3, #9
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	3b01      	subs	r3, #1
 80046cc:	041b      	lsls	r3, r3, #16
 80046ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	3b01      	subs	r3, #1
 80046da:	061b      	lsls	r3, r3, #24
 80046dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046e0:	4923      	ldr	r1, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a21      	ldr	r2, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046f2:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 80046f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCC_OscConfig+0x778>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046fe:	00d2      	lsls	r2, r2, #3
 8004700:	491b      	ldr	r1, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f023 020c 	bic.w	r2, r3, #12
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	4917      	ldr	r1, [pc, #92]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	f023 0202 	bic.w	r2, r3, #2
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	4912      	ldr	r1, [pc, #72]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a07      	ldr	r2, [pc, #28]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_RCC_OscConfig+0x76c>)
 8004760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fd fd85 	bl	8002274 <HAL_GetTick>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800476c:	e011      	b.n	8004792 <HAL_RCC_OscConfig+0x78e>
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	58024800 	.word	0x58024800
 8004778:	fffffc0c 	.word	0xfffffc0c
 800477c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fd78 	bl	8002274 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e08a      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x77c>
 800479e:	e082      	b.n	80048a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a42      	ldr	r2, [pc, #264]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80047a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fd62 	bl	8002274 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd fd5e 	bl	8002274 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e070      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x7b0>
 80047d2:	e068      	b.n	80048a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d031      	beq.n	800484c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d12a      	bne.n	800484c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d122      	bne.n	800484c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d11a      	bne.n	800484c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	0a5b      	lsrs	r3, r3, #9
 800481a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e02b      	b.n	80048a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	08db      	lsrs	r3, r3, #3
 8004856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800485a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d01f      	beq.n	80048a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004872:	f7fd fcff 	bl	8002274 <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004878:	bf00      	nop
 800487a:	f7fd fcfb 	bl	8002274 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	4293      	cmp	r3, r2
 8004884:	d0f9      	beq.n	800487a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 8004888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_OscConfig+0x8b0>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004892:	00d2      	lsls	r2, r2, #3
 8004894:	4906      	ldr	r1, [pc, #24]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 8004896:	4313      	orrs	r3, r2
 8004898:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_RCC_OscConfig+0x8ac>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024400 	.word	0x58024400
 80048b4:	ffff0007 	.word	0xffff0007

080048b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e19c      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048cc:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d910      	bls.n	80048fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b87      	ldr	r3, [pc, #540]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 020f 	bic.w	r2, r3, #15
 80048e2:	4985      	ldr	r1, [pc, #532]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b83      	ldr	r3, [pc, #524]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e184      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	4b7b      	ldr	r3, [pc, #492]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004914:	429a      	cmp	r2, r3
 8004916:	d908      	bls.n	800492a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004918:	4b78      	ldr	r3, [pc, #480]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	4975      	ldr	r1, [pc, #468]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004926:	4313      	orrs	r3, r2
 8004928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	4b70      	ldr	r3, [pc, #448]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004942:	429a      	cmp	r2, r3
 8004944:	d908      	bls.n	8004958 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004946:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	496a      	ldr	r1, [pc, #424]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004954:	4313      	orrs	r3, r2
 8004956:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	4b64      	ldr	r3, [pc, #400]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004970:	429a      	cmp	r2, r3
 8004972:	d908      	bls.n	8004986 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004974:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	495e      	ldr	r1, [pc, #376]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004982:	4313      	orrs	r3, r2
 8004984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d010      	beq.n	80049b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800499e:	429a      	cmp	r2, r3
 80049a0:	d908      	bls.n	80049b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	4953      	ldr	r1, [pc, #332]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d908      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f023 020f 	bic.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4947      	ldr	r1, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d055      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4940      	ldr	r1, [pc, #256]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d121      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0f6      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d115      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0ea      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0de      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a48:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0d6      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f023 0207 	bic.w	r2, r3, #7
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4925      	ldr	r1, [pc, #148]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fd fc03 	bl	8002274 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a72:	f7fd fbff 	bl	8002274 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0be      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d1eb      	bne.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d208      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f023 020f 	bic.w	r2, r3, #15
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCC_ClockConfig+0x244>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d214      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 020f 	bic.w	r2, r3, #15
 8004ade:	4906      	ldr	r1, [pc, #24]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <HAL_RCC_ClockConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e086      	b.n	8004c06 <HAL_RCC_ClockConfig+0x34e>
 8004af8:	52002000 	.word	0x52002000
 8004afc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d208      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b1c:	4b3c      	ldr	r3, [pc, #240]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	4939      	ldr	r1, [pc, #228]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	4b34      	ldr	r3, [pc, #208]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d208      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	492e      	ldr	r1, [pc, #184]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d208      	bcs.n	8004b8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	4922      	ldr	r1, [pc, #136]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d208      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	4917      	ldr	r1, [pc, #92]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bb8:	f000 f834 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	4912      	ldr	r1, [pc, #72]	; (8004c14 <HAL_RCC_ClockConfig+0x35c>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_ClockConfig+0x358>)
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <HAL_RCC_ClockConfig+0x35c>)
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <HAL_RCC_ClockConfig+0x360>)
 8004bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x364>)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x368>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd faf0 	bl	80021e0 <HAL_InitTick>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	58024400 	.word	0x58024400
 8004c14:	08009200 	.word	0x08009200
 8004c18:	24000334 	.word	0x24000334
 8004c1c:	24000330 	.word	0x24000330
 8004c20:	24000338 	.word	0x24000338

08004c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	; 0x24
 8004c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2a:	4bb3      	ldr	r3, [pc, #716]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c32:	2b18      	cmp	r3, #24
 8004c34:	f200 8155 	bhi.w	8004ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004ee3 	.word	0x08004ee3
 8004c48:	08004ee3 	.word	0x08004ee3
 8004c4c:	08004ee3 	.word	0x08004ee3
 8004c50:	08004ee3 	.word	0x08004ee3
 8004c54:	08004ee3 	.word	0x08004ee3
 8004c58:	08004ee3 	.word	0x08004ee3
 8004c5c:	08004ee3 	.word	0x08004ee3
 8004c60:	08004ccb 	.word	0x08004ccb
 8004c64:	08004ee3 	.word	0x08004ee3
 8004c68:	08004ee3 	.word	0x08004ee3
 8004c6c:	08004ee3 	.word	0x08004ee3
 8004c70:	08004ee3 	.word	0x08004ee3
 8004c74:	08004ee3 	.word	0x08004ee3
 8004c78:	08004ee3 	.word	0x08004ee3
 8004c7c:	08004ee3 	.word	0x08004ee3
 8004c80:	08004cd1 	.word	0x08004cd1
 8004c84:	08004ee3 	.word	0x08004ee3
 8004c88:	08004ee3 	.word	0x08004ee3
 8004c8c:	08004ee3 	.word	0x08004ee3
 8004c90:	08004ee3 	.word	0x08004ee3
 8004c94:	08004ee3 	.word	0x08004ee3
 8004c98:	08004ee3 	.word	0x08004ee3
 8004c9c:	08004ee3 	.word	0x08004ee3
 8004ca0:	08004cd7 	.word	0x08004cd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ca4:	4b94      	ldr	r3, [pc, #592]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cb0:	4b91      	ldr	r3, [pc, #580]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	4a90      	ldr	r2, [pc, #576]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cc2:	e111      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cc4:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cc6:	61bb      	str	r3, [r7, #24]
      break;
 8004cc8:	e10e      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cca:	4b8d      	ldr	r3, [pc, #564]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ccc:	61bb      	str	r3, [r7, #24]
      break;
 8004cce:	e10b      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cd2:	61bb      	str	r3, [r7, #24]
      break;
 8004cd4:	e108      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cd6:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ce0:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cec:	4b82      	ldr	r3, [pc, #520]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cf6:	4b80      	ldr	r3, [pc, #512]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	08db      	lsrs	r3, r3, #3
 8004cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80e1 	beq.w	8004edc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	f000 8083 	beq.w	8004e28 <HAL_RCC_GetSysClockFreq+0x204>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	f200 80a1 	bhi.w	8004e6c <HAL_RCC_GetSysClockFreq+0x248>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x114>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d056      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d36:	e099      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d38:	4b6f      	ldr	r3, [pc, #444]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02d      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d44:	4b6c      	ldr	r3, [pc, #432]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	4a6b      	ldr	r2, [pc, #428]	; (8004efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6e:	4b62      	ldr	r3, [pc, #392]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d9e:	e087      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db2:	4b51      	ldr	r3, [pc, #324]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004de2:	e065      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df6:	4b40      	ldr	r3, [pc, #256]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e26:	e043      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e6a:	e021      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eba:	3301      	adds	r3, #1
 8004ebc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	ee07 3a90 	vmov	s15, r3
 8004ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed4:	ee17 3a90 	vmov	r3, s15
 8004ed8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eda:	e005      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
      break;
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ee4:	61bb      	str	r3, [r7, #24]
      break;
 8004ee6:	bf00      	nop
  }

  return sysclockfreq;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	03d09000 	.word	0x03d09000
 8004f00:	003d0900 	.word	0x003d0900
 8004f04:	017d7840 	.word	0x017d7840
 8004f08:	46000000 	.word	0x46000000
 8004f0c:	4c742400 	.word	0x4c742400
 8004f10:	4a742400 	.word	0x4a742400
 8004f14:	4bbebc20 	.word	0x4bbebc20

08004f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f1e:	f7ff fe81 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490f      	ldr	r1, [pc, #60]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f52:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f56:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	08009200 	.word	0x08009200
 8004f70:	24000334 	.word	0x24000334
 8004f74:	24000330 	.word	0x24000330

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f7c:	f7ff ffcc 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	08009200 	.word	0x08009200

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa8:	b0ca      	sub	sp, #296	; 0x128
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004fc8:	2500      	movs	r5, #0
 8004fca:	ea54 0305 	orrs.w	r3, r4, r5
 8004fce:	d049      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fda:	d02f      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe0:	d828      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe6:	d01a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fec:	d822      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d007      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ff8:	e01c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffa:	4bb8      	ldr	r3, [pc, #736]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4ab7      	ldr	r2, [pc, #732]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005006:	e01a      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500c:	3308      	adds	r3, #8
 800500e:	2102      	movs	r1, #2
 8005010:	4618      	mov	r0, r3
 8005012:	f002 fb61 	bl	80076d8 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800501c:	e00f      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005022:	3328      	adds	r3, #40	; 0x28
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f002 fc08 	bl	800783c <RCCEx_PLL3_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005032:	e004      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800503a:	e000      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800503c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005046:	4ba5      	ldr	r3, [pc, #660]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005054:	4aa1      	ldr	r2, [pc, #644]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005056:	430b      	orrs	r3, r1
 8005058:	6513      	str	r3, [r2, #80]	; 0x50
 800505a:	e003      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005070:	f04f 0900 	mov.w	r9, #0
 8005074:	ea58 0309 	orrs.w	r3, r8, r9
 8005078:	d047      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	2b04      	cmp	r3, #4
 8005082:	d82a      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050a1 	.word	0x080050a1
 8005090:	080050af 	.word	0x080050af
 8005094:	080050c5 	.word	0x080050c5
 8005098:	080050e3 	.word	0x080050e3
 800509c:	080050e3 	.word	0x080050e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4b8e      	ldr	r3, [pc, #568]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a8d      	ldr	r2, [pc, #564]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ac:	e01a      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b2:	3308      	adds	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 fb0e 	bl	80076d8 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050c2:	e00f      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c8:	3328      	adds	r3, #40	; 0x28
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 fbb5 	bl	800783c <RCCEx_PLL3_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ec:	4b7b      	ldr	r3, [pc, #492]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	f023 0107 	bic.w	r1, r3, #7
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	4a78      	ldr	r2, [pc, #480]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005100:	e003      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005116:	f04f 0b00 	mov.w	fp, #0
 800511a:	ea5a 030b 	orrs.w	r3, sl, fp
 800511e:	d04c      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d030      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800512c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005130:	d829      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005132:	2bc0      	cmp	r3, #192	; 0xc0
 8005134:	d02d      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005136:	2bc0      	cmp	r3, #192	; 0xc0
 8005138:	d825      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d018      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d821      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d007      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800514a:	e01c      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514c:	4b63      	ldr	r3, [pc, #396]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a62      	ldr	r2, [pc, #392]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005158:	e01c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	3308      	adds	r3, #8
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f002 fab8 	bl	80076d8 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800516e:	e011      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005174:	3328      	adds	r3, #40	; 0x28
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f002 fb5f 	bl	800783c <RCCEx_PLL3_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800519c:	4b4f      	ldr	r3, [pc, #316]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800519e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	4a4c      	ldr	r2, [pc, #304]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6513      	str	r3, [r2, #80]	; 0x50
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80051c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d053      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051e6:	d035      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80051e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ec:	d82e      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051f2:	d031      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80051f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051f8:	d828      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051fe:	d01a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005204:	d822      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800520a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520e:	d007      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005210:	e01c      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005212:	4b32      	ldr	r3, [pc, #200]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4a31      	ldr	r2, [pc, #196]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800521e:	e01c      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005224:	3308      	adds	r3, #8
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f002 fa55 	bl	80076d8 <RCCEx_PLL2_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005234:	e011      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	3328      	adds	r3, #40	; 0x28
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f002 fafc 	bl	800783c <RCCEx_PLL3_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800524a:	e006      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005252:	e002      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005254:	bf00      	nop
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005274:	430b      	orrs	r3, r1
 8005276:	6593      	str	r3, [r2, #88]	; 0x58
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800527e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800528e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005298:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800529c:	460b      	mov	r3, r1
 800529e:	4313      	orrs	r3, r2
 80052a0:	d056      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ae:	d038      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b4:	d831      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052ba:	d034      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052c0:	d82b      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052c6:	d01d      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052cc:	d825      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052d8:	e01f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052da:	bf00      	nop
 80052dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e0:	4ba2      	ldr	r3, [pc, #648]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4aa1      	ldr	r2, [pc, #644]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ec:	e01c      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f2:	3308      	adds	r3, #8
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f002 f9ee 	bl	80076d8 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005302:	e011      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	3328      	adds	r3, #40	; 0x28
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f002 fa95 	bl	800783c <RCCEx_PLL3_Config>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005330:	4b8e      	ldr	r3, [pc, #568]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005340:	4a8a      	ldr	r2, [pc, #552]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005342:	430b      	orrs	r3, r1
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800535c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005366:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d03a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d01f      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800537a:	2b30      	cmp	r3, #48	; 0x30
 800537c:	d819      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800537e:	2b20      	cmp	r3, #32
 8005380:	d00c      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005382:	2b20      	cmp	r3, #32
 8005384:	d815      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d019      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d111      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538e:	4b77      	ldr	r3, [pc, #476]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	4a76      	ldr	r2, [pc, #472]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800539a:	e011      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a0:	3308      	adds	r3, #8
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f002 f997 	bl	80076d8 <RCCEx_PLL2_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053b0:	e006      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053b8:	e002      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053c8:	4b68      	ldr	r3, [pc, #416]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	4a65      	ldr	r2, [pc, #404]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80053f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053f6:	2300      	movs	r3, #0
 80053f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d051      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005410:	d035      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005416:	d82e      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800541c:	d031      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800541e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005422:	d828      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d01a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800542a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542e:	d822      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d007      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800543a:	e01c      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005448:	e01c      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	3308      	adds	r3, #8
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f002 f940 	bl	80076d8 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800545e:	e011      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	3328      	adds	r3, #40	; 0x28
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f002 f9e7 	bl	800783c <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005474:	e006      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800547c:	e002      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800548c:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	4a34      	ldr	r2, [pc, #208]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6513      	str	r3, [r2, #80]	; 0x50
 80054a0:	e003      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80054c4:	460b      	mov	r3, r1
 80054c6:	4313      	orrs	r3, r2
 80054c8:	d056      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d4:	d033      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054da:	d82c      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e0:	d02f      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80054e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e6:	d826      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ec:	d02b      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80054ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054f2:	d820      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f8:	d012      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fe:	d81a      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d022      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d115      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	3308      	adds	r3, #8
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f002 f8e0 	bl	80076d8 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800551e:	e015      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	2101      	movs	r1, #1
 8005528:	4618      	mov	r0, r3
 800552a:	f002 f987 	bl	800783c <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005534:	e00a      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800553c:	e006      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800553e:	bf00      	nop
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800554a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005562:	4a02      	ldr	r2, [pc, #8]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005564:	430b      	orrs	r3, r1
 8005566:	6513      	str	r3, [r2, #80]	; 0x50
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800558e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d055      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a4:	d033      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055aa:	d82c      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d02f      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d826      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055bc:	d02b      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055c2:	d820      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c8:	d012      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ce:	d81a      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d022      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d8:	d115      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	3308      	adds	r3, #8
 80055e0:	2101      	movs	r1, #1
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 f878 	bl	80076d8 <RCCEx_PLL2_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055ee:	e015      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	3328      	adds	r3, #40	; 0x28
 80055f6:	2101      	movs	r1, #1
 80055f8:	4618      	mov	r0, r3
 80055fa:	f002 f91f 	bl	800783c <RCCEx_PLL3_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005604:	e00a      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560c:	e006      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800561a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005624:	4ba3      	ldr	r3, [pc, #652]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005634:	4a9f      	ldr	r2, [pc, #636]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005636:	430b      	orrs	r3, r1
 8005638:	6593      	str	r3, [r2, #88]	; 0x58
 800563a:	e003      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005654:	2300      	movs	r3, #0
 8005656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800565a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800565e:	460b      	mov	r3, r1
 8005660:	4313      	orrs	r3, r2
 8005662:	d037      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566e:	d00e      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005674:	d816      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d018      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800567a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567e:	d111      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005680:	4b8c      	ldr	r3, [pc, #560]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a8b      	ldr	r2, [pc, #556]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	3308      	adds	r3, #8
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f002 f81e 	bl	80076d8 <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056b6:	4b7f      	ldr	r3, [pc, #508]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a7b      	ldr	r2, [pc, #492]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6513      	str	r3, [r2, #80]	; 0x50
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80056e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d039      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d81c      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005741 	.word	0x08005741
 8005708:	08005715 	.word	0x08005715
 800570c:	08005723 	.word	0x08005723
 8005710:	08005741 	.word	0x08005741
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4b67      	ldr	r3, [pc, #412]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a66      	ldr	r2, [pc, #408]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005720:	e00f      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005726:	3308      	adds	r3, #8
 8005728:	2102      	movs	r1, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 ffd4 	bl	80076d8 <RCCEx_PLL2_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800574a:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	f023 0103 	bic.w	r1, r3, #3
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005758:	4a56      	ldr	r2, [pc, #344]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575a:	430b      	orrs	r3, r1
 800575c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800577e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	f000 809f 	beq.w	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578a:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4a      	ldr	r2, [pc, #296]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005796:	f7fc fd6d 	bl	8002274 <HAL_GetTick>
 800579a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800579e:	e00b      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a0:	f7fc fd68 	bl	8002274 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b64      	cmp	r3, #100	; 0x64
 80057ae:	d903      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b8:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ed      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d179      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057cc:	4b39      	ldr	r3, [pc, #228]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057d8:	4053      	eors	r3, r2
 80057da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057e2:	4b34      	ldr	r3, [pc, #208]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a30      	ldr	r2, [pc, #192]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057fa:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a2d      	ldr	r2, [pc, #180]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005804:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005806:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005808:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581a:	d118      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc fd2a 	bl	8002274 <HAL_GetTick>
 8005820:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005824:	e00d      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005826:	f7fc fd25 	bl	8002274 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005830:	1ad2      	subs	r2, r2, r3
 8005832:	f241 3388 	movw	r3, #5000	; 0x1388
 8005836:	429a      	cmp	r2, r3
 8005838:	d903      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005840:	e005      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0eb      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800584e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005852:	2b00      	cmp	r3, #0
 8005854:	d129      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005866:	d10e      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005868:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005878:	091a      	lsrs	r2, r3, #4
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800587c:	4013      	ands	r3, r2
 800587e:	4a0d      	ldr	r2, [pc, #52]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005880:	430b      	orrs	r3, r1
 8005882:	6113      	str	r3, [r2, #16]
 8005884:	e005      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005890:	6113      	str	r3, [r2, #16]
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005894:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800589e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a2:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
 80058a8:	e00e      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80058b2:	e009      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058b4:	58024400 	.word	0x58024400
 80058b8:	58024800 	.word	0x58024800
 80058bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f002 0301 	and.w	r3, r2, #1
 80058d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f000 8089 	beq.w	80059fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f0:	2b28      	cmp	r3, #40	; 0x28
 80058f2:	d86b      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	080059d5 	.word	0x080059d5
 8005900:	080059cd 	.word	0x080059cd
 8005904:	080059cd 	.word	0x080059cd
 8005908:	080059cd 	.word	0x080059cd
 800590c:	080059cd 	.word	0x080059cd
 8005910:	080059cd 	.word	0x080059cd
 8005914:	080059cd 	.word	0x080059cd
 8005918:	080059cd 	.word	0x080059cd
 800591c:	080059a1 	.word	0x080059a1
 8005920:	080059cd 	.word	0x080059cd
 8005924:	080059cd 	.word	0x080059cd
 8005928:	080059cd 	.word	0x080059cd
 800592c:	080059cd 	.word	0x080059cd
 8005930:	080059cd 	.word	0x080059cd
 8005934:	080059cd 	.word	0x080059cd
 8005938:	080059cd 	.word	0x080059cd
 800593c:	080059b7 	.word	0x080059b7
 8005940:	080059cd 	.word	0x080059cd
 8005944:	080059cd 	.word	0x080059cd
 8005948:	080059cd 	.word	0x080059cd
 800594c:	080059cd 	.word	0x080059cd
 8005950:	080059cd 	.word	0x080059cd
 8005954:	080059cd 	.word	0x080059cd
 8005958:	080059cd 	.word	0x080059cd
 800595c:	080059d5 	.word	0x080059d5
 8005960:	080059cd 	.word	0x080059cd
 8005964:	080059cd 	.word	0x080059cd
 8005968:	080059cd 	.word	0x080059cd
 800596c:	080059cd 	.word	0x080059cd
 8005970:	080059cd 	.word	0x080059cd
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059cd 	.word	0x080059cd
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059cd 	.word	0x080059cd
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059cd 	.word	0x080059cd
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059cd 	.word	0x080059cd
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059cd 	.word	0x080059cd
 800599c:	080059d5 	.word	0x080059d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	3308      	adds	r3, #8
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 fe95 	bl	80076d8 <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059b4:	e00f      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ba:	3328      	adds	r3, #40	; 0x28
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 ff3c 	bl	800783c <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059de:	4bbf      	ldr	r3, [pc, #764]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	4abb      	ldr	r2, [pc, #748]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6553      	str	r3, [r2, #84]	; 0x54
 80059f2:	e003      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f002 0302 	and.w	r3, r2, #2
 8005a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005a16:	460b      	mov	r3, r1
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	d041      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	d824      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a79 	.word	0x08005a79
 8005a30:	08005a45 	.word	0x08005a45
 8005a34:	08005a5b 	.word	0x08005a5b
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a79 	.word	0x08005a79
 8005a40:	08005a79 	.word	0x08005a79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a48:	3308      	adds	r3, #8
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fe43 	bl	80076d8 <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a58:	e00f      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5e:	3328      	adds	r3, #40	; 0x28
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 feea 	bl	800783c <RCCEx_PLL3_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a6e:	e004      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a82:	4b96      	ldr	r3, [pc, #600]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f023 0107 	bic.w	r1, r3, #7
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a90:	4a92      	ldr	r2, [pc, #584]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6553      	str	r3, [r2, #84]	; 0x54
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f002 0304 	and.w	r3, r2, #4
 8005aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	d044      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d825      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005b03 	.word	0x08005b03
 8005ae0:	08005b21 	.word	0x08005b21
 8005ae4:	08005b21 	.word	0x08005b21
 8005ae8:	08005b21 	.word	0x08005b21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af0:	3308      	adds	r3, #8
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fdef 	bl	80076d8 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b06:	3328      	adds	r3, #40	; 0x28
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 fe96 	bl	800783c <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b2a:	4b6c      	ldr	r3, [pc, #432]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f023 0107 	bic.w	r1, r3, #7
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3a:	4a68      	ldr	r2, [pc, #416]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f002 0320 	and.w	r3, r2, #32
 8005b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d055      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b76:	d033      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b7c:	d82c      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d02f      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d826      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b8e:	d02b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005b90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b94:	d820      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9a:	d012      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba0:	d81a      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d022      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005baa:	d115      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fd8f 	bl	80076d8 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e015      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc6:	3328      	adds	r3, #40	; 0x28
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fe36 	bl	800783c <RCCEx_PLL3_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bd6:	e00a      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bde:	e006      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005be0:	bf00      	nop
 8005be2:	e004      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005be4:	bf00      	nop
 8005be6:	e002      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bf6:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6553      	str	r3, [r2, #84]	; 0x54
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d058      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c42:	d033      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c48:	d82c      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d02f      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d826      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c5a:	d02b      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c60:	d820      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c66:	d012      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6c:	d81a      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d022      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c76:	d115      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fd29 	bl	80076d8 <RCCEx_PLL2_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e015      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	3328      	adds	r3, #40	; 0x28
 8005c94:	2102      	movs	r1, #2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fdd0 	bl	800783c <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ca2:	e00a      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005caa:	e006      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cac:	bf00      	nop
 8005cae:	e004      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd2:	4a02      	ldr	r2, [pc, #8]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd8:	e006      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cda:	bf00      	nop
 8005cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d055      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d14:	d033      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d1a:	d82c      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	d02f      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d826      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d2c:	d02b      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d32:	d820      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d38:	d012      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d3e:	d81a      	bhi.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d022      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d115      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4e:	3308      	adds	r3, #8
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fcc0 	bl	80076d8 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d5e:	e015      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	3328      	adds	r3, #40	; 0x28
 8005d66:	2102      	movs	r1, #2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fd67 	bl	800783c <RCCEx_PLL3_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d74:	e00a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d7e:	bf00      	nop
 8005d80:	e004      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10b      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d94:	4ba1      	ldr	r3, [pc, #644]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005da4:	4a9d      	ldr	r2, [pc, #628]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6593      	str	r3, [r2, #88]	; 0x58
 8005daa:	e003      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f002 0308 	and.w	r3, r2, #8
 8005dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d01e      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	3328      	adds	r3, #40	; 0x28
 8005de8:	2102      	movs	r1, #2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fd26 	bl	800783c <RCCEx_PLL3_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005dfc:	4b87      	ldr	r3, [pc, #540]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0c:	4a83      	ldr	r2, [pc, #524]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f002 0310 	and.w	r3, r2, #16
 8005e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	d01e      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d10c      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e44:	3328      	adds	r3, #40	; 0x28
 8005e46:	2102      	movs	r1, #2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fcf7 	bl	800783c <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e5a:	4b70      	ldr	r3, [pc, #448]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e6a:	4a6c      	ldr	r2, [pc, #432]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d03e      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e9c:	d022      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea2:	d81b      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d00b      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005eae:	e015      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fc0d 	bl	80076d8 <RCCEx_PLL2_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ec4:	e00f      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	3328      	adds	r3, #40	; 0x28
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fcb4 	bl	800783c <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eee:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005efe:	4a47      	ldr	r2, [pc, #284]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6593      	str	r3, [r2, #88]	; 0x58
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f36:	d01f      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f3c:	d818      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f48:	d007      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f4a:	e011      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b33      	ldr	r3, [pc, #204]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a32      	ldr	r2, [pc, #200]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f58:	e00f      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5e:	3328      	adds	r3, #40	; 0x28
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fc6a 	bl	800783c <RCCEx_PLL3_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f6e:	e004      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f82:	4b26      	ldr	r3, [pc, #152]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f92:	4a22      	ldr	r2, [pc, #136]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6553      	str	r3, [r2, #84]	; 0x54
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005fae:	673b      	str	r3, [r7, #112]	; 0x70
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8005fb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	d034      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d007      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005fce:	e011      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a11      	ldr	r2, [pc, #68]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005fdc:	e00e      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fb76 	bl	80076d8 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006012:	4a02      	ldr	r2, [pc, #8]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006014:	430b      	orrs	r3, r1
 8006016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800601a:	bf00      	nop
 800601c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006034:	66bb      	str	r3, [r7, #104]	; 0x68
 8006036:	2300      	movs	r3, #0
 8006038:	66fb      	str	r3, [r7, #108]	; 0x6c
 800603a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d00c      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	3328      	adds	r3, #40	; 0x28
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f001 fbf5 	bl	800783c <RCCEx_PLL3_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800606a:	663b      	str	r3, [r7, #96]	; 0x60
 800606c:	2300      	movs	r3, #0
 800606e:	667b      	str	r3, [r7, #100]	; 0x64
 8006070:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d038      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006086:	d018      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608c:	d811      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	d014      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d80b      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d011      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800609e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a2:	d106      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a4:	4bc3      	ldr	r3, [pc, #780]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	4ac2      	ldr	r2, [pc, #776]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060b0:	e008      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060b8:	e004      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060ba:	bf00      	nop
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060be:	bf00      	nop
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060cc:	4bb9      	ldr	r3, [pc, #740]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060dc:	4ab5      	ldr	r2, [pc, #724]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060de:	430b      	orrs	r3, r1
 80060e0:	6553      	str	r3, [r2, #84]	; 0x54
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80060f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060fa:	2300      	movs	r3, #0
 80060fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006102:	460b      	mov	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006108:	4baa      	ldr	r3, [pc, #680]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	4aa7      	ldr	r2, [pc, #668]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006128:	653b      	str	r3, [r7, #80]	; 0x50
 800612a:	2300      	movs	r3, #0
 800612c:	657b      	str	r3, [r7, #84]	; 0x54
 800612e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006138:	4b9e      	ldr	r3, [pc, #632]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006148:	4a9a      	ldr	r2, [pc, #616]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614a:	430b      	orrs	r3, r1
 800614c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
 800615c:	2300      	movs	r3, #0
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800616a:	4b92      	ldr	r3, [pc, #584]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006178:	4a8e      	ldr	r2, [pc, #568]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800617a:	430b      	orrs	r3, r1
 800617c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	2300      	movs	r3, #0
 800618e:	647b      	str	r3, [r7, #68]	; 0x44
 8006190:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800619a:	4b86      	ldr	r3, [pc, #536]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	4a85      	ldr	r2, [pc, #532]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061a4:	6113      	str	r3, [r2, #16]
 80061a6:	4b83      	ldr	r3, [pc, #524]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80061b2:	4a80      	ldr	r2, [pc, #512]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c6:	2300      	movs	r3, #0
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061d4:	4b77      	ldr	r3, [pc, #476]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	4a74      	ldr	r2, [pc, #464]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80061f4:	633b      	str	r3, [r7, #48]	; 0x30
 80061f6:	2300      	movs	r3, #0
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006204:	4b6b      	ldr	r3, [pc, #428]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	4a67      	ldr	r2, [pc, #412]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006216:	430b      	orrs	r3, r1
 8006218:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	2100      	movs	r1, #0
 8006224:	62b9      	str	r1, [r7, #40]	; 0x28
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006230:	460b      	mov	r3, r1
 8006232:	4313      	orrs	r3, r2
 8006234:	d011      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623a:	3308      	adds	r3, #8
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fa4a 	bl	80076d8 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800624a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	2100      	movs	r1, #0
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
 800626c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d011      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	3308      	adds	r3, #8
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fa2a 	bl	80076d8 <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800628a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	2100      	movs	r1, #0
 80062a4:	61b9      	str	r1, [r7, #24]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d011      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ba:	3308      	adds	r3, #8
 80062bc:	2102      	movs	r1, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fa0a 	bl	80076d8 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	2100      	movs	r1, #0
 80062e4:	6139      	str	r1, [r7, #16]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d011      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fa:	3328      	adds	r3, #40	; 0x28
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 fa9c 	bl	800783c <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	2100      	movs	r1, #0
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d011      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3328      	adds	r3, #40	; 0x28
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fa7c 	bl	800783c <RCCEx_PLL3_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	2100      	movs	r1, #0
 8006364:	6039      	str	r1, [r7, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d011      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	3328      	adds	r3, #40	; 0x28
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fa5c 	bl	800783c <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800639a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80063ae:	46bd      	mov	sp, r7
 80063b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b4:	58024400 	.word	0x58024400

080063b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b090      	sub	sp, #64	; 0x40
 80063bc:	af00      	add	r7, sp, #0
 80063be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80063ca:	430b      	orrs	r3, r1
 80063cc:	f040 8094 	bne.w	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80063d0:	4b9e      	ldr	r3, [pc, #632]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2b04      	cmp	r3, #4
 80063de:	f200 8087 	bhi.w	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063fd 	.word	0x080063fd
 80063ec:	08006425 	.word	0x08006425
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	080064e9 	.word	0x080064e9
 80063f8:	08006475 	.word	0x08006475
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063fc:	4b93      	ldr	r3, [pc, #588]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d108      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f810 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006418:	f000 bd45 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006420:	f000 bd41 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006424:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006430:	d108      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fd54 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006440:	f000 bd31 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	f000 bd2d 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800644c:	4b7f      	ldr	r3, [pc, #508]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d108      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fe94 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006468:	f000 bd1d 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006470:	f000 bd19 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006474:	4b75      	ldr	r3, [pc, #468]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800647c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800647e:	4b73      	ldr	r3, [pc, #460]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d10c      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006490:	4b6e      	ldr	r3, [pc, #440]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	4a6d      	ldr	r2, [pc, #436]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a2:	e01f      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064a4:	4b69      	ldr	r3, [pc, #420]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b0:	d106      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b8:	d102      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064ba:	4b66      	ldr	r3, [pc, #408]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064be:	e011      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064c0:	4b62      	ldr	r3, [pc, #392]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064cc:	d106      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d4:	d102      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064d6:	4b60      	ldr	r3, [pc, #384]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80064e0:	f000 bce1 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80064e4:	f000 bcdf 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064e8:	4b5c      	ldr	r3, [pc, #368]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ec:	f000 bcdb 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f4:	f000 bcd7 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80064f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006500:	430b      	orrs	r3, r1
 8006502:	f040 80ad 	bne.w	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006506:	4b51      	ldr	r3, [pc, #324]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800650e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d056      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	f200 8090 	bhi.w	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2bc0      	cmp	r3, #192	; 0xc0
 8006526:	f000 8088 	beq.w	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2bc0      	cmp	r3, #192	; 0xc0
 800652e:	f200 8088 	bhi.w	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d032      	beq.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	f200 8081 	bhi.w	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d014      	beq.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800654c:	e079      	b.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800654e:	4b3f      	ldr	r3, [pc, #252]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800655a:	d108      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800655c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006560:	4618      	mov	r0, r3
 8006562:	f000 ff67 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800656a:	f000 bc9c 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006572:	f000 bc98 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006576:	4b35      	ldr	r3, [pc, #212]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800657e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006582:	d108      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006584:	f107 0318 	add.w	r3, r7, #24
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fcab 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006592:	f000 bc88 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659a:	f000 bc84 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800659e:	4b2b      	ldr	r3, [pc, #172]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065aa:	d108      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ac:	f107 030c 	add.w	r3, r7, #12
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fdeb 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ba:	f000 bc74 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c2:	f000 bc70 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065d0:	4b1e      	ldr	r3, [pc, #120]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d10c      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	08db      	lsrs	r3, r3, #3
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065ee:	fa22 f303 	lsr.w	r3, r2, r3
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f4:	e01f      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065f6:	4b15      	ldr	r3, [pc, #84]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006602:	d106      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660a:	d102      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006610:	e011      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800661e:	d106      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006626:	d102      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006632:	f000 bc38 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006636:	f000 bc36 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663e:	f000 bc32 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006646:	f000 bc2e 	b.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
 8006650:	03d09000 	.word	0x03d09000
 8006654:	003d0900 	.word	0x003d0900
 8006658:	017d7840 	.word	0x017d7840
 800665c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006664:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006668:	430b      	orrs	r3, r1
 800666a:	f040 809c 	bne.w	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800666e:	4b9e      	ldr	r3, [pc, #632]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006676:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800667e:	d054      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006686:	f200 808b 	bhi.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006690:	f000 8083 	beq.w	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800669a:	f200 8081 	bhi.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a4:	d02f      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ac:	d878      	bhi.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ba:	d012      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80066bc:	e070      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066be:	4b8a      	ldr	r3, [pc, #552]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ca:	d107      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 feaf 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066da:	e3e4      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e0:	e3e1      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066e2:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f0:	f107 0318 	add.w	r3, r7, #24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fbf5 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066fe:	e3d2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006704:	e3cf      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006706:	4b78      	ldr	r3, [pc, #480]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fd37 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006722:	e3c0      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006728:	e3bd      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800672a:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006732:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006734:	4b6c      	ldr	r3, [pc, #432]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b04      	cmp	r3, #4
 800673e:	d10c      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006746:	4b68      	ldr	r3, [pc, #416]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	08db      	lsrs	r3, r3, #3
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	4a66      	ldr	r2, [pc, #408]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006758:	e01e      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800675a:	4b63      	ldr	r3, [pc, #396]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006766:	d106      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800676e:	d102      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006770:	4b5f      	ldr	r3, [pc, #380]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006774:	e010      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006776:	4b5c      	ldr	r3, [pc, #368]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006782:	d106      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800678a:	d102      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006790:	e002      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006796:	e386      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006798:	e385      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800679a:	4b57      	ldr	r3, [pc, #348]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679e:	e382      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	e37f      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80067ae:	430b      	orrs	r3, r1
 80067b0:	f040 80a7 	bne.w	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80067b4:	4b4c      	ldr	r3, [pc, #304]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c4:	d055      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067cc:	f200 8096 	bhi.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067d6:	f000 8084 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067e0:	f200 808c 	bhi.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ea:	d030      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067f2:	f200 8083 	bhi.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006802:	d012      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006804:	e07a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006806:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fe0b 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e340      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006828:	e33d      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800682a:	4b2f      	ldr	r3, [pc, #188]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006838:	f107 0318 	add.w	r3, r7, #24
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fb51 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006846:	e32e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684c:	e32b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800684e:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685a:	d107      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800685c:	f107 030c 	add.w	r3, r7, #12
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fc93 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800686a:	e31c      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006870:	e319      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006872:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800687a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d10c      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	08db      	lsrs	r3, r3, #3
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800689a:	fa22 f303 	lsr.w	r3, r2, r3
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a0:	e01e      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068a2:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d106      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b6:	d102      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068bc:	e010      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ca:	d106      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d2:	d102      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068de:	e2e2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068e0:	e2e1      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e6:	e2de      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068e8:	58024400 	.word	0x58024400
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	003d0900 	.word	0x003d0900
 80068f4:	017d7840 	.word	0x017d7840
 80068f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006900:	e2d1      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006906:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800690a:	430b      	orrs	r3, r1
 800690c:	f040 809c 	bne.w	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006910:	4b93      	ldr	r3, [pc, #588]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006920:	d054      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006928:	f200 808b 	bhi.w	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006932:	f000 8083 	beq.w	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693c:	f200 8081 	bhi.w	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	d02f      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	d878      	bhi.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695c:	d012      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800695e:	e070      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006960:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800696c:	d107      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800696e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fd5e 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800697c:	e293      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006982:	e290      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006984:	4b76      	ldr	r3, [pc, #472]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f000 faa4 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a0:	e281      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a6:	e27e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069a8:	4b6d      	ldr	r3, [pc, #436]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fbe6 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c4:	e26f      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ca:	e26c      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069cc:	4b64      	ldr	r3, [pc, #400]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069d6:	4b62      	ldr	r3, [pc, #392]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d10c      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069e8:	4b5d      	ldr	r3, [pc, #372]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a5c      	ldr	r2, [pc, #368]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fa:	e01e      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069fc:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a08:	d106      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a10:	d102      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a12:	4b55      	ldr	r3, [pc, #340]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a16:	e010      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a18:	4b51      	ldr	r3, [pc, #324]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a24:	d106      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d102      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a2e:	4b4f      	ldr	r3, [pc, #316]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a32:	e002      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a38:	e235      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a3a:	e234      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a3c:	4b4c      	ldr	r3, [pc, #304]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a40:	e231      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a46:	e22e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a50:	430b      	orrs	r3, r1
 8006a52:	f040 808f 	bne.w	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a56:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a66:	d06b      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6e:	d874      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a76:	d056      	beq.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a7e:	d86c      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a86:	d03b      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a8e:	d864      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	d021      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9e:	d85c      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d004      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006aae:	e054      	b.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fe fa62 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ab6:	e1f6      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ab8:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac6:	f107 0318 	add.w	r3, r7, #24
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fa0a 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad4:	e1e7      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ada:	e1e4      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006adc:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae8:	d107      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fb4c 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af8:	e1d5      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afe:	e1d2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d109      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1e:	e1c2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b24:	e1bf      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b32:	d102      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b38:	e1b5      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3e:	e1b2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4c:	d102      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b52:	e1a8      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b58:	e1a5      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5e:	e1a2      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b60:	58024400 	.word	0x58024400
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	003d0900 	.word	0x003d0900
 8006b6c:	017d7840 	.word	0x017d7840
 8006b70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	d173      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b80:	4b9c      	ldr	r3, [pc, #624]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b90:	d02f      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d863      	bhi.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba6:	d012      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ba8:	e05b      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006baa:	4b92      	ldr	r3, [pc, #584]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb8:	f107 0318 	add.w	r3, r7, #24
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f991 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc6:	e16e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bcc:	e16b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bda:	d107      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fad3 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bea:	e15c      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e159      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bf2:	4b80      	ldr	r3, [pc, #512]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bfc:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d10c      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c0e:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	4a77      	ldr	r2, [pc, #476]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	e01e      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c22:	4b74      	ldr	r3, [pc, #464]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c36:	d102      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c38:	4b70      	ldr	r3, [pc, #448]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3c:	e010      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c3e:	4b6d      	ldr	r3, [pc, #436]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c52:	d102      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c54:	4b6a      	ldr	r3, [pc, #424]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c58:	e002      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c5e:	e122      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c60:	e121      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c66:	e11e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006c70:	430b      	orrs	r3, r1
 8006c72:	d133      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c74:	4b5f      	ldr	r3, [pc, #380]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8a:	d012      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006c8c:	e023      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c8e:	4b59      	ldr	r3, [pc, #356]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9a:	d107      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fbc7 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006caa:	e0fc      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb0:	e0f9      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb2:	4b50      	ldr	r3, [pc, #320]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc0:	f107 0318 	add.w	r3, r7, #24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f90d 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cce:	e0ea      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd4:	e0e7      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cda:	e0e4      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	f040 808d 	bne.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006cea:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cfa:	d06b      	beq.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d02:	d874      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d056      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d86c      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d1a:	d03b      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d22:	d864      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2a:	d021      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d85c      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006d42:	e054      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d44:	f000 f8b8 	bl	8006eb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d4a:	e0ac      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d58:	d107      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5a:	f107 0318 	add.w	r3, r7, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f8c0 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d68:	e09d      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d6e:	e09a      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d70:	4b20      	ldr	r3, [pc, #128]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d7e:	f107 030c 	add.w	r3, r7, #12
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fa02 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8c:	e08b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d92:	e088      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d94:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d109      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006da0:	4b14      	ldr	r3, [pc, #80]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	08db      	lsrs	r3, r3, #3
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	4a13      	ldr	r2, [pc, #76]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db2:	e078      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db8:	e075      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006dba:	4b0e      	ldr	r3, [pc, #56]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc6:	d102      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dcc:	e06b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd2:	e068      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de0:	d102      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de6:	e05e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dec:	e05b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df2:	e058      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006df4:	58024400 	.word	0x58024400
 8006df8:	03d09000 	.word	0x03d09000
 8006dfc:	003d0900 	.word	0x003d0900
 8006e00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	d148      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e20:	d02a      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e28:	d838      	bhi.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e36:	d00d      	beq.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006e38:	e030      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e46:	d102      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006e48:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e4c:	e02b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e52:	e028      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e54:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e60:	d107      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fae4 	bl	8007434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e70:	e019      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e76:	e016      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e84:	d107      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e86:	f107 0318 	add.w	r3, r7, #24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f82a 	bl	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e94:	e007      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea0:	e001      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3740      	adds	r7, #64	; 0x40
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	017d7840 	.word	0x017d7840

08006eb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ebc:	f7fe f82c 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	091b      	lsrs	r3, r3, #4
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4904      	ldr	r1, [pc, #16]	; (8006ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	08009200 	.word	0x08009200

08006ee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b089      	sub	sp, #36	; 0x24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eec:	4ba1      	ldr	r3, [pc, #644]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ef6:	4b9f      	ldr	r3, [pc, #636]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	0b1b      	lsrs	r3, r3, #12
 8006efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f02:	4b9c      	ldr	r3, [pc, #624]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f0e:	4b99      	ldr	r3, [pc, #612]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	08db      	lsrs	r3, r3, #3
 8006f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8111 	beq.w	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	f000 8083 	beq.w	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	f200 80a1 	bhi.w	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d056      	beq.n	8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f4e:	e099      	b.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f50:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d02d      	beq.n	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f5c:	4b85      	ldr	r3, [pc, #532]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	08db      	lsrs	r3, r3, #3
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	4a84      	ldr	r2, [pc, #528]	; (8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f86:	4b7b      	ldr	r3, [pc, #492]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fb6:	e087      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fca:	4b6a      	ldr	r3, [pc, #424]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ffa:	e065      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b59      	ldr	r3, [pc, #356]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703e:	e043      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b48      	ldr	r3, [pc, #288]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a03 	vldr	s12, [r7, #12]
 8007066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007082:	e021      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b37      	ldr	r3, [pc, #220]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070c8:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	0a5b      	lsrs	r3, r3, #9
 80070ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ee:	ee17 2a90 	vmov	r2, s15
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80070f6:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800710c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007110:	edd7 6a07 	vldr	s13, [r7, #28]
 8007114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800711c:	ee17 2a90 	vmov	r2, s15
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007124:	4b13      	ldr	r3, [pc, #76]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800713a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800713e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714a:	ee17 2a90 	vmov	r2, s15
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007152:	e008      	b.n	8007166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	609a      	str	r2, [r3, #8]
}
 8007166:	bf00      	nop
 8007168:	3724      	adds	r7, #36	; 0x24
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	58024400 	.word	0x58024400
 8007178:	03d09000 	.word	0x03d09000
 800717c:	46000000 	.word	0x46000000
 8007180:	4c742400 	.word	0x4c742400
 8007184:	4a742400 	.word	0x4a742400
 8007188:	4bbebc20 	.word	0x4bbebc20

0800718c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	; 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007194:	4ba1      	ldr	r3, [pc, #644]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800719e:	4b9f      	ldr	r3, [pc, #636]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	0d1b      	lsrs	r3, r3, #20
 80071a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071aa:	4b9c      	ldr	r3, [pc, #624]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071b6:	4b99      	ldr	r3, [pc, #612]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8111 	beq.w	80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	f000 8083 	beq.w	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	f200 80a1 	bhi.w	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d056      	beq.n	80072a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071f6:	e099      	b.n	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f8:	4b88      	ldr	r3, [pc, #544]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02d      	beq.n	8007260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007204:	4b85      	ldr	r3, [pc, #532]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	4a84      	ldr	r2, [pc, #528]	; (8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b7b      	ldr	r3, [pc, #492]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800725e:	e087      	b.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b6a      	ldr	r3, [pc, #424]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a2:	e065      	b.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800742c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e6:	e043      	b.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b48      	ldr	r3, [pc, #288]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800732a:	e021      	b.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800742c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007370:	4b2a      	ldr	r3, [pc, #168]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	0a5b      	lsrs	r3, r3, #9
 8007376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738a:	edd7 6a07 	vldr	s13, [r7, #28]
 800738e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800739e:	4b1f      	ldr	r3, [pc, #124]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	0c1b      	lsrs	r3, r3, #16
 80073a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c4:	ee17 2a90 	vmov	r2, s15
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	0e1b      	lsrs	r3, r3, #24
 80073d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f2:	ee17 2a90 	vmov	r2, s15
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073fa:	e008      	b.n	800740e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	609a      	str	r2, [r3, #8]
}
 800740e:	bf00      	nop
 8007410:	3724      	adds	r7, #36	; 0x24
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	58024400 	.word	0x58024400
 8007420:	03d09000 	.word	0x03d09000
 8007424:	46000000 	.word	0x46000000
 8007428:	4c742400 	.word	0x4c742400
 800742c:	4a742400 	.word	0x4a742400
 8007430:	4bbebc20 	.word	0x4bbebc20

08007434 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007434:	b480      	push	{r7}
 8007436:	b089      	sub	sp, #36	; 0x24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743c:	4ba0      	ldr	r3, [pc, #640]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007446:	4b9e      	ldr	r3, [pc, #632]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	091b      	lsrs	r3, r3, #4
 800744c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007450:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007452:	4b9b      	ldr	r3, [pc, #620]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800745c:	4b98      	ldr	r3, [pc, #608]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800745e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007474:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8111 	beq.w	80076a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b02      	cmp	r3, #2
 8007484:	f000 8083 	beq.w	800758e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b02      	cmp	r3, #2
 800748c:	f200 80a1 	bhi.w	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d056      	beq.n	800754a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800749c:	e099      	b.n	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749e:	4b88      	ldr	r3, [pc, #544]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02d      	beq.n	8007506 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074aa:	4b85      	ldr	r3, [pc, #532]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	08db      	lsrs	r3, r3, #3
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	4a83      	ldr	r2, [pc, #524]	; (80076c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d4:	4b7a      	ldr	r3, [pc, #488]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007504:	e087      	b.n	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007510:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80076cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007518:	4b69      	ldr	r3, [pc, #420]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007528:	ed97 6a03 	vldr	s12, [r7, #12]
 800752c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007548:	e065      	b.n	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80076d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755c:	4b58      	ldr	r3, [pc, #352]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007570:	eddf 5a55 	vldr	s11, [pc, #340]	; 80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758c:	e043      	b.n	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80076d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800759c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a0:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d0:	e021      	b.n	8007616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80076cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e4:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007614:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007616:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800762c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007630:	edd7 6a07 	vldr	s13, [r7, #28]
 8007634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763c:	ee17 2a90 	vmov	r2, s15
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007644:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800765a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800765e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766a:	ee17 2a90 	vmov	r2, s15
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	0e1b      	lsrs	r3, r3, #24
 8007678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007698:	ee17 2a90 	vmov	r2, s15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076a0:	e008      	b.n	80076b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	3724      	adds	r7, #36	; 0x24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	58024400 	.word	0x58024400
 80076c4:	03d09000 	.word	0x03d09000
 80076c8:	46000000 	.word	0x46000000
 80076cc:	4c742400 	.word	0x4c742400
 80076d0:	4a742400 	.word	0x4a742400
 80076d4:	4bbebc20 	.word	0x4bbebc20

080076d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e6:	4b53      	ldr	r3, [pc, #332]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d101      	bne.n	80076f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e099      	b.n	800782a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076f6:	4b4f      	ldr	r3, [pc, #316]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a4e      	ldr	r2, [pc, #312]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007702:	f7fa fdb7 	bl	8002274 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007708:	e008      	b.n	800771c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800770a:	f7fa fdb3 	bl	8002274 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e086      	b.n	800782a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800771c:	4b45      	ldr	r3, [pc, #276]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007728:	4b42      	ldr	r3, [pc, #264]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	031b      	lsls	r3, r3, #12
 8007736:	493f      	ldr	r1, [pc, #252]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	628b      	str	r3, [r1, #40]	; 0x28
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	3b01      	subs	r3, #1
 800774c:	025b      	lsls	r3, r3, #9
 800774e:	b29b      	uxth	r3, r3
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	3b01      	subs	r3, #1
 8007766:	061b      	lsls	r3, r3, #24
 8007768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800776c:	4931      	ldr	r1, [pc, #196]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007772:	4b30      	ldr	r3, [pc, #192]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	492d      	ldr	r1, [pc, #180]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007784:	4b2b      	ldr	r3, [pc, #172]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	f023 0220 	bic.w	r2, r3, #32
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	4928      	ldr	r1, [pc, #160]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	4a26      	ldr	r2, [pc, #152]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077a2:	4b24      	ldr	r3, [pc, #144]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <RCCEx_PLL2_Config+0x160>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	69d2      	ldr	r2, [r2, #28]
 80077ae:	00d2      	lsls	r2, r2, #3
 80077b0:	4920      	ldr	r1, [pc, #128]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077b6:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	f043 0310 	orr.w	r3, r3, #16
 80077c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d4:	e00f      	b.n	80077f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d106      	bne.n	80077ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077dc:	4b15      	ldr	r3, [pc, #84]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077e8:	e005      	b.n	80077f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a11      	ldr	r2, [pc, #68]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007802:	f7fa fd37 	bl	8002274 <HAL_GetTick>
 8007806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007808:	e008      	b.n	800781c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800780a:	f7fa fd33 	bl	8002274 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e006      	b.n	800782a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	ffff0007 	.word	0xffff0007

0800783c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800784a:	4b53      	ldr	r3, [pc, #332]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d101      	bne.n	800785a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e099      	b.n	800798e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800785a:	4b4f      	ldr	r3, [pc, #316]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a4e      	ldr	r2, [pc, #312]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007866:	f7fa fd05 	bl	8002274 <HAL_GetTick>
 800786a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800786c:	e008      	b.n	8007880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800786e:	f7fa fd01 	bl	8002274 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e086      	b.n	800798e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007880:	4b45      	ldr	r3, [pc, #276]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800788c:	4b42      	ldr	r3, [pc, #264]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	051b      	lsls	r3, r3, #20
 800789a:	493f      	ldr	r1, [pc, #252]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	628b      	str	r3, [r1, #40]	; 0x28
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	025b      	lsls	r3, r3, #9
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	061b      	lsls	r3, r3, #24
 80078cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078d0:	4931      	ldr	r1, [pc, #196]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078d6:	4b30      	ldr	r3, [pc, #192]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	492d      	ldr	r1, [pc, #180]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	4928      	ldr	r1, [pc, #160]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078fa:	4b27      	ldr	r3, [pc, #156]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	4a26      	ldr	r2, [pc, #152]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <RCCEx_PLL3_Config+0x160>)
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	69d2      	ldr	r2, [r2, #28]
 8007912:	00d2      	lsls	r2, r2, #3
 8007914:	4920      	ldr	r1, [pc, #128]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007916:	4313      	orrs	r3, r2
 8007918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007938:	e00f      	b.n	800795a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d106      	bne.n	800794e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007940:	4b15      	ldr	r3, [pc, #84]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a14      	ldr	r2, [pc, #80]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800794a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800794c:	e005      	b.n	800795a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	4a11      	ldr	r2, [pc, #68]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007966:	f7fa fc85 	bl	8002274 <HAL_GetTick>
 800796a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800796c:	e008      	b.n	8007980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800796e:	f7fa fc81 	bl	8002274 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e006      	b.n	800798e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0f0      	beq.n	800796e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	58024400 	.word	0x58024400
 800799c:	ffff0007 	.word	0xffff0007

080079a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e049      	b.n	8007a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7fa fab4 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f000 fdc2 	bl	8008568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e049      	b.n	8007af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f841 	bl	8007afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f000 fd6b 	bl	8008568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 f93a 	bl	8008d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a3e      	ldr	r2, [pc, #248]	; (8007c28 <HAL_TIM_PWM_Stop+0x118>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d013      	beq.n	8007b5a <HAL_TIM_PWM_Stop+0x4a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3d      	ldr	r2, [pc, #244]	; (8007c2c <HAL_TIM_PWM_Stop+0x11c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00e      	beq.n	8007b5a <HAL_TIM_PWM_Stop+0x4a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a3b      	ldr	r2, [pc, #236]	; (8007c30 <HAL_TIM_PWM_Stop+0x120>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d009      	beq.n	8007b5a <HAL_TIM_PWM_Stop+0x4a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a3a      	ldr	r2, [pc, #232]	; (8007c34 <HAL_TIM_PWM_Stop+0x124>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d004      	beq.n	8007b5a <HAL_TIM_PWM_Stop+0x4a>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a38      	ldr	r2, [pc, #224]	; (8007c38 <HAL_TIM_PWM_Stop+0x128>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d101      	bne.n	8007b5e <HAL_TIM_PWM_Stop+0x4e>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <HAL_TIM_PWM_Stop+0x50>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <HAL_TIM_PWM_Stop+0x84>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <HAL_TIM_PWM_Stop+0x84>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a1a      	ldr	r2, [r3, #32]
 8007b9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10f      	bne.n	8007bc4 <HAL_TIM_PWM_Stop+0xb4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	f240 4344 	movw	r3, #1092	; 0x444
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_PWM_Stop+0xb4>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <HAL_TIM_PWM_Stop+0xc4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd2:	e023      	b.n	8007c1c <HAL_TIM_PWM_Stop+0x10c>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d104      	bne.n	8007be4 <HAL_TIM_PWM_Stop+0xd4>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007be2:	e01b      	b.n	8007c1c <HAL_TIM_PWM_Stop+0x10c>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d104      	bne.n	8007bf4 <HAL_TIM_PWM_Stop+0xe4>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf2:	e013      	b.n	8007c1c <HAL_TIM_PWM_Stop+0x10c>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b0c      	cmp	r3, #12
 8007bf8:	d104      	bne.n	8007c04 <HAL_TIM_PWM_Stop+0xf4>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c02:	e00b      	b.n	8007c1c <HAL_TIM_PWM_Stop+0x10c>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d104      	bne.n	8007c14 <HAL_TIM_PWM_Stop+0x104>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c12:	e003      	b.n	8007c1c <HAL_TIM_PWM_Stop+0x10c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40010400 	.word	0x40010400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40014400 	.word	0x40014400
 8007c38:	40014800 	.word	0x40014800

08007c3c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <HAL_TIM_PWM_Start_IT+0x28>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	bf14      	ite	ne
 8007c5c:	2301      	movne	r3, #1
 8007c5e:	2300      	moveq	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	e03c      	b.n	8007cde <HAL_TIM_PWM_Start_IT+0xa2>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d109      	bne.n	8007c7e <HAL_TIM_PWM_Start_IT+0x42>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	bf14      	ite	ne
 8007c76:	2301      	movne	r3, #1
 8007c78:	2300      	moveq	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	e02f      	b.n	8007cde <HAL_TIM_PWM_Start_IT+0xa2>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d109      	bne.n	8007c98 <HAL_TIM_PWM_Start_IT+0x5c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	e022      	b.n	8007cde <HAL_TIM_PWM_Start_IT+0xa2>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b0c      	cmp	r3, #12
 8007c9c:	d109      	bne.n	8007cb2 <HAL_TIM_PWM_Start_IT+0x76>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	e015      	b.n	8007cde <HAL_TIM_PWM_Start_IT+0xa2>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d109      	bne.n	8007ccc <HAL_TIM_PWM_Start_IT+0x90>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e008      	b.n	8007cde <HAL_TIM_PWM_Start_IT+0xa2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e0ec      	b.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_PWM_Start_IT+0xba>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf4:	e023      	b.n	8007d3e <HAL_TIM_PWM_Start_IT+0x102>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start_IT+0xca>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d04:	e01b      	b.n	8007d3e <HAL_TIM_PWM_Start_IT+0x102>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start_IT+0xda>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d14:	e013      	b.n	8007d3e <HAL_TIM_PWM_Start_IT+0x102>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b0c      	cmp	r3, #12
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start_IT+0xea>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d24:	e00b      	b.n	8007d3e <HAL_TIM_PWM_Start_IT+0x102>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start_IT+0xfa>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d34:	e003      	b.n	8007d3e <HAL_TIM_PWM_Start_IT+0x102>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	d841      	bhi.n	8007dc8 <HAL_TIM_PWM_Start_IT+0x18c>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <HAL_TIM_PWM_Start_IT+0x110>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d81 	.word	0x08007d81
 8007d50:	08007dc9 	.word	0x08007dc9
 8007d54:	08007dc9 	.word	0x08007dc9
 8007d58:	08007dc9 	.word	0x08007dc9
 8007d5c:	08007d93 	.word	0x08007d93
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007dc9 	.word	0x08007dc9
 8007d6c:	08007da5 	.word	0x08007da5
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007db7 	.word	0x08007db7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0202 	orr.w	r2, r2, #2
 8007d8e:	60da      	str	r2, [r3, #12]
      break;
 8007d90:	e01d      	b.n	8007dce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0204 	orr.w	r2, r2, #4
 8007da0:	60da      	str	r2, [r3, #12]
      break;
 8007da2:	e014      	b.n	8007dce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0208 	orr.w	r2, r2, #8
 8007db2:	60da      	str	r2, [r3, #12]
      break;
 8007db4:	e00b      	b.n	8007dce <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0210 	orr.w	r2, r2, #16
 8007dc4:	60da      	str	r2, [r3, #12]
      break;
 8007dc6:	e002      	b.n	8007dce <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
      break;
 8007dcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d174      	bne.n	8007ebe <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 ffdd 	bl	8008d9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a38      	ldr	r2, [pc, #224]	; (8007ec8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d013      	beq.n	8007e14 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a36      	ldr	r2, [pc, #216]	; (8007ecc <HAL_TIM_PWM_Start_IT+0x290>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00e      	beq.n	8007e14 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a35      	ldr	r2, [pc, #212]	; (8007ed0 <HAL_TIM_PWM_Start_IT+0x294>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a33      	ldr	r2, [pc, #204]	; (8007ed4 <HAL_TIM_PWM_Start_IT+0x298>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a32      	ldr	r2, [pc, #200]	; (8007ed8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d101      	bne.n	8007e18 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <HAL_TIM_PWM_Start_IT+0x1de>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a25      	ldr	r2, [pc, #148]	; (8007ec8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d022      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d01d      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a25      	ldr	r2, [pc, #148]	; (8007edc <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d018      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a22      	ldr	r2, [pc, #136]	; (8007ee4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00e      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <HAL_TIM_PWM_Start_IT+0x290>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d009      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_TIM_PWM_Start_IT+0x242>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <HAL_TIM_PWM_Start_IT+0x294>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d115      	bne.n	8007eaa <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b06      	cmp	r3, #6
 8007e8e:	d015      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x280>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e96:	d011      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea8:	e008      	b.n	8007ebc <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e000      	b.n	8007ebe <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40014400 	.word	0x40014400
 8007ed8:	40014800 	.word	0x40014800
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40001800 	.word	0x40001800
 8007eec:	00010007 	.word	0x00010007

08007ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d020      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01b      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0202 	mvn.w	r2, #2
 8007f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fb00 	bl	8008540 <HAL_TIM_IC_CaptureCallback>
 8007f40:	e005      	b.n	8007f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 faf2 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7f8 fbcd 	bl	80006e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d020      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01b      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0204 	mvn.w	r2, #4
 8007f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fada 	bl	8008540 <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 facc 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7f8 fba7 	bl	80006e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d020      	beq.n	8007fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01b      	beq.n	8007fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0208 	mvn.w	r2, #8
 8007fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fab4 	bl	8008540 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 faa6 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7f8 fb81 	bl	80006e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d020      	beq.n	8008038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01b      	beq.n	8008038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0210 	mvn.w	r2, #16
 8008008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2208      	movs	r2, #8
 800800e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa8e 	bl	8008540 <HAL_TIM_IC_CaptureCallback>
 8008024:	e005      	b.n	8008032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa80 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7f8 fb5b 	bl	80006e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0201 	mvn.w	r2, #1
 8008054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa5e 	bl	8008518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00c      	beq.n	800808a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 ff47 	bl	8008f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 ff3f 	bl	8008f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa41 	bl	8008554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f06f 0220 	mvn.w	r2, #32
 80080ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 ff07 	bl	8008f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800811a:	2302      	movs	r3, #2
 800811c:	e0ff      	b.n	800831e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b14      	cmp	r3, #20
 800812a:	f200 80f0 	bhi.w	800830e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008189 	.word	0x08008189
 8008138:	0800830f 	.word	0x0800830f
 800813c:	0800830f 	.word	0x0800830f
 8008140:	0800830f 	.word	0x0800830f
 8008144:	080081c9 	.word	0x080081c9
 8008148:	0800830f 	.word	0x0800830f
 800814c:	0800830f 	.word	0x0800830f
 8008150:	0800830f 	.word	0x0800830f
 8008154:	0800820b 	.word	0x0800820b
 8008158:	0800830f 	.word	0x0800830f
 800815c:	0800830f 	.word	0x0800830f
 8008160:	0800830f 	.word	0x0800830f
 8008164:	0800824b 	.word	0x0800824b
 8008168:	0800830f 	.word	0x0800830f
 800816c:	0800830f 	.word	0x0800830f
 8008170:	0800830f 	.word	0x0800830f
 8008174:	0800828d 	.word	0x0800828d
 8008178:	0800830f 	.word	0x0800830f
 800817c:	0800830f 	.word	0x0800830f
 8008180:	0800830f 	.word	0x0800830f
 8008184:	080082cd 	.word	0x080082cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fa90 	bl	80086b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0208 	orr.w	r2, r2, #8
 80081a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0204 	bic.w	r2, r2, #4
 80081b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6999      	ldr	r1, [r3, #24]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	619a      	str	r2, [r3, #24]
      break;
 80081c6:	e0a5      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fb00 	bl	80087d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6999      	ldr	r1, [r3, #24]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	619a      	str	r2, [r3, #24]
      break;
 8008208:	e084      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fb69 	bl	80088e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0208 	orr.w	r2, r2, #8
 8008224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0204 	bic.w	r2, r2, #4
 8008234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69d9      	ldr	r1, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	61da      	str	r2, [r3, #28]
      break;
 8008248:	e064      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fbd1 	bl	80089f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69da      	ldr	r2, [r3, #28]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69d9      	ldr	r1, [r3, #28]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	021a      	lsls	r2, r3, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	61da      	str	r2, [r3, #28]
      break;
 800828a:	e043      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fc1a 	bl	8008acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0208 	orr.w	r2, r2, #8
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0204 	bic.w	r2, r2, #4
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082ca:	e023      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fc5e 	bl	8008b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	021a      	lsls	r2, r3, #8
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800830c:	e002      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
      break;
 8008312:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop

08008328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_TIM_ConfigClockSource+0x1c>
 8008340:	2302      	movs	r3, #2
 8008342:	e0dc      	b.n	80084fe <HAL_TIM_ConfigClockSource+0x1d6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	4b6a      	ldr	r3, [pc, #424]	; (8008508 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008360:	4013      	ands	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800836a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a64      	ldr	r2, [pc, #400]	; (800850c <HAL_TIM_ConfigClockSource+0x1e4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	f000 80a9 	beq.w	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008380:	4a62      	ldr	r2, [pc, #392]	; (800850c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	f200 80ae 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008388:	4a61      	ldr	r2, [pc, #388]	; (8008510 <HAL_TIM_ConfigClockSource+0x1e8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	f000 80a1 	beq.w	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008390:	4a5f      	ldr	r2, [pc, #380]	; (8008510 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	f200 80a6 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008398:	4a5e      	ldr	r2, [pc, #376]	; (8008514 <HAL_TIM_ConfigClockSource+0x1ec>)
 800839a:	4293      	cmp	r3, r2
 800839c:	f000 8099 	beq.w	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80083a0:	4a5c      	ldr	r2, [pc, #368]	; (8008514 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	f200 809e 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083ac:	f000 8091 	beq.w	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80083b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083b4:	f200 8096 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083bc:	f000 8089 	beq.w	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80083c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c4:	f200 808e 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083cc:	d03e      	beq.n	800844c <HAL_TIM_ConfigClockSource+0x124>
 80083ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d2:	f200 8087 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083da:	f000 8086 	beq.w	80084ea <HAL_TIM_ConfigClockSource+0x1c2>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	d87f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083e4:	2b70      	cmp	r3, #112	; 0x70
 80083e6:	d01a      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xf6>
 80083e8:	2b70      	cmp	r3, #112	; 0x70
 80083ea:	d87b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d050      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x16a>
 80083f0:	2b60      	cmp	r3, #96	; 0x60
 80083f2:	d877      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083f4:	2b50      	cmp	r3, #80	; 0x50
 80083f6:	d03c      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x14a>
 80083f8:	2b50      	cmp	r3, #80	; 0x50
 80083fa:	d873      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d058      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x18a>
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d86f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d064      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008408:	2b30      	cmp	r3, #48	; 0x30
 800840a:	d86b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d060      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008410:	2b20      	cmp	r3, #32
 8008412:	d867      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05c      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008418:	2b10      	cmp	r3, #16
 800841a:	d05a      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800841c:	e062      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800842e:	f000 fc95 	bl	8008d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	609a      	str	r2, [r3, #8]
      break;
 800844a:	e04f      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800845c:	f000 fc7e 	bl	8008d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846e:	609a      	str	r2, [r3, #8]
      break;
 8008470:	e03c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800847e:	461a      	mov	r2, r3
 8008480:	f000 fbee 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2150      	movs	r1, #80	; 0x50
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fc48 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 8008490:	e02c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 fc0d 	bl	8008cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2160      	movs	r1, #96	; 0x60
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fc38 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e01c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084be:	461a      	mov	r2, r3
 80084c0:	f000 fbce 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fc28 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 80084d0:	e00c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f000 fc1f 	bl	8008d20 <TIM_ITRx_SetConfig>
      break;
 80084e2:	e003      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	e000      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80084ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	ffceff88 	.word	0xffceff88
 800850c:	00100040 	.word	0x00100040
 8008510:	00100030 	.word	0x00100030
 8008514:	00100020 	.word	0x00100020

08008518 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a46      	ldr	r2, [pc, #280]	; (8008694 <TIM_Base_SetConfig+0x12c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008586:	d00f      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a43      	ldr	r2, [pc, #268]	; (8008698 <TIM_Base_SetConfig+0x130>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00b      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a42      	ldr	r2, [pc, #264]	; (800869c <TIM_Base_SetConfig+0x134>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d007      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a41      	ldr	r2, [pc, #260]	; (80086a0 <TIM_Base_SetConfig+0x138>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a40      	ldr	r2, [pc, #256]	; (80086a4 <TIM_Base_SetConfig+0x13c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d108      	bne.n	80085ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a35      	ldr	r2, [pc, #212]	; (8008694 <TIM_Base_SetConfig+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d01f      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d01b      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a32      	ldr	r2, [pc, #200]	; (8008698 <TIM_Base_SetConfig+0x130>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d017      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a31      	ldr	r2, [pc, #196]	; (800869c <TIM_Base_SetConfig+0x134>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d013      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <TIM_Base_SetConfig+0x138>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00f      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <TIM_Base_SetConfig+0x13c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2e      	ldr	r2, [pc, #184]	; (80086a8 <TIM_Base_SetConfig+0x140>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a2d      	ldr	r2, [pc, #180]	; (80086ac <TIM_Base_SetConfig+0x144>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_Base_SetConfig+0x9a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a2c      	ldr	r2, [pc, #176]	; (80086b0 <TIM_Base_SetConfig+0x148>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d108      	bne.n	8008614 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a16      	ldr	r2, [pc, #88]	; (8008694 <TIM_Base_SetConfig+0x12c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00f      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <TIM_Base_SetConfig+0x13c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00b      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <TIM_Base_SetConfig+0x140>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d007      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a16      	ldr	r2, [pc, #88]	; (80086ac <TIM_Base_SetConfig+0x144>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <TIM_Base_SetConfig+0x148>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d103      	bne.n	8008668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b01      	cmp	r3, #1
 8008678:	d105      	bne.n	8008686 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f023 0201 	bic.w	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	611a      	str	r2, [r3, #16]
  }
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	40010000 	.word	0x40010000
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40000c00 	.word	0x40000c00
 80086a4:	40010400 	.word	0x40010400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800

080086b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f023 0201 	bic.w	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4b37      	ldr	r3, [pc, #220]	; (80087bc <TIM_OC1_SetConfig+0x108>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 0302 	bic.w	r3, r3, #2
 80086fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a2d      	ldr	r2, [pc, #180]	; (80087c0 <TIM_OC1_SetConfig+0x10c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00f      	beq.n	8008730 <TIM_OC1_SetConfig+0x7c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a2c      	ldr	r2, [pc, #176]	; (80087c4 <TIM_OC1_SetConfig+0x110>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00b      	beq.n	8008730 <TIM_OC1_SetConfig+0x7c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a2b      	ldr	r2, [pc, #172]	; (80087c8 <TIM_OC1_SetConfig+0x114>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d007      	beq.n	8008730 <TIM_OC1_SetConfig+0x7c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a2a      	ldr	r2, [pc, #168]	; (80087cc <TIM_OC1_SetConfig+0x118>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC1_SetConfig+0x7c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <TIM_OC1_SetConfig+0x11c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10c      	bne.n	800874a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f023 0308 	bic.w	r3, r3, #8
 8008736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f023 0304 	bic.w	r3, r3, #4
 8008748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <TIM_OC1_SetConfig+0x10c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_OC1_SetConfig+0xbe>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1b      	ldr	r2, [pc, #108]	; (80087c4 <TIM_OC1_SetConfig+0x110>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_OC1_SetConfig+0xbe>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <TIM_OC1_SetConfig+0x114>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_OC1_SetConfig+0xbe>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a19      	ldr	r2, [pc, #100]	; (80087cc <TIM_OC1_SetConfig+0x118>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_OC1_SetConfig+0xbe>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <TIM_OC1_SetConfig+0x11c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d111      	bne.n	8008796 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	621a      	str	r2, [r3, #32]
}
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	fffeff8f 	.word	0xfffeff8f
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800

080087d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	f023 0210 	bic.w	r2, r3, #16
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <TIM_OC2_SetConfig+0xfc>)
 8008800:	4013      	ands	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800880a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f023 0320 	bic.w	r3, r3, #32
 800881e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a29      	ldr	r2, [pc, #164]	; (80088d4 <TIM_OC2_SetConfig+0x100>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_OC2_SetConfig+0x68>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a28      	ldr	r2, [pc, #160]	; (80088d8 <TIM_OC2_SetConfig+0x104>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d10d      	bne.n	8008858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <TIM_OC2_SetConfig+0x100>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00f      	beq.n	8008880 <TIM_OC2_SetConfig+0xac>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1d      	ldr	r2, [pc, #116]	; (80088d8 <TIM_OC2_SetConfig+0x104>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00b      	beq.n	8008880 <TIM_OC2_SetConfig+0xac>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <TIM_OC2_SetConfig+0x108>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d007      	beq.n	8008880 <TIM_OC2_SetConfig+0xac>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <TIM_OC2_SetConfig+0x10c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_OC2_SetConfig+0xac>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a1a      	ldr	r2, [pc, #104]	; (80088e4 <TIM_OC2_SetConfig+0x110>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d113      	bne.n	80088a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800888e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	feff8fff 	.word	0xfeff8fff
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800

080088e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4b33      	ldr	r3, [pc, #204]	; (80089e0 <TIM_OC3_SetConfig+0xf8>)
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a28      	ldr	r2, [pc, #160]	; (80089e4 <TIM_OC3_SetConfig+0xfc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_OC3_SetConfig+0x66>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <TIM_OC3_SetConfig+0x100>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d10d      	bne.n	800896a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_OC3_SetConfig+0xfc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00f      	beq.n	8008992 <TIM_OC3_SetConfig+0xaa>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <TIM_OC3_SetConfig+0x100>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00b      	beq.n	8008992 <TIM_OC3_SetConfig+0xaa>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <TIM_OC3_SetConfig+0x104>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d007      	beq.n	8008992 <TIM_OC3_SetConfig+0xaa>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <TIM_OC3_SetConfig+0x108>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d003      	beq.n	8008992 <TIM_OC3_SetConfig+0xaa>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a19      	ldr	r2, [pc, #100]	; (80089f4 <TIM_OC3_SetConfig+0x10c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d113      	bne.n	80089ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	fffeff8f 	.word	0xfffeff8f
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <TIM_OC4_SetConfig+0xbc>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	031b      	lsls	r3, r3, #12
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a19      	ldr	r2, [pc, #100]	; (8008ab8 <TIM_OC4_SetConfig+0xc0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00f      	beq.n	8008a78 <TIM_OC4_SetConfig+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a18      	ldr	r2, [pc, #96]	; (8008abc <TIM_OC4_SetConfig+0xc4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00b      	beq.n	8008a78 <TIM_OC4_SetConfig+0x80>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a17      	ldr	r2, [pc, #92]	; (8008ac0 <TIM_OC4_SetConfig+0xc8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d007      	beq.n	8008a78 <TIM_OC4_SetConfig+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a16      	ldr	r2, [pc, #88]	; (8008ac4 <TIM_OC4_SetConfig+0xcc>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_OC4_SetConfig+0x80>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <TIM_OC4_SetConfig+0xd0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d109      	bne.n	8008a8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	019b      	lsls	r3, r3, #6
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	feff8fff 	.word	0xfeff8fff
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40010400 	.word	0x40010400
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40014400 	.word	0x40014400
 8008ac8:	40014800 	.word	0x40014800

08008acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <TIM_OC5_SetConfig+0xb0>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	041b      	lsls	r3, r3, #16
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <TIM_OC5_SetConfig+0xb4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00f      	beq.n	8008b42 <TIM_OC5_SetConfig+0x76>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <TIM_OC5_SetConfig+0xb8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00b      	beq.n	8008b42 <TIM_OC5_SetConfig+0x76>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <TIM_OC5_SetConfig+0xbc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d007      	beq.n	8008b42 <TIM_OC5_SetConfig+0x76>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <TIM_OC5_SetConfig+0xc0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d003      	beq.n	8008b42 <TIM_OC5_SetConfig+0x76>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <TIM_OC5_SetConfig+0xc4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d109      	bne.n	8008b56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	621a      	str	r2, [r3, #32]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	fffeff8f 	.word	0xfffeff8f
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800

08008b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4b22      	ldr	r3, [pc, #136]	; (8008c48 <TIM_OC6_SetConfig+0xb4>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	021b      	lsls	r3, r3, #8
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	051b      	lsls	r3, r3, #20
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <TIM_OC6_SetConfig+0xb8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00f      	beq.n	8008c0c <TIM_OC6_SetConfig+0x78>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <TIM_OC6_SetConfig+0xbc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00b      	beq.n	8008c0c <TIM_OC6_SetConfig+0x78>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <TIM_OC6_SetConfig+0xc0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <TIM_OC6_SetConfig+0x78>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a16      	ldr	r2, [pc, #88]	; (8008c58 <TIM_OC6_SetConfig+0xc4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d003      	beq.n	8008c0c <TIM_OC6_SetConfig+0x78>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC6_SetConfig+0xc8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d109      	bne.n	8008c20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	feff8fff 	.word	0xfeff8fff
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40010400 	.word	0x40010400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 030a 	bic.w	r3, r3, #10
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	f023 0210 	bic.w	r2, r3, #16
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	031b      	lsls	r3, r3, #12
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
	...

08008d20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <TIM_ITRx_SetConfig+0x38>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f043 0307 	orr.w	r3, r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	609a      	str	r2, [r3, #8]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	ffcfff8f 	.word	0xffcfff8f

08008d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	609a      	str	r2, [r3, #8]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f003 031f 	and.w	r3, r3, #31
 8008dae:	2201      	movs	r2, #1
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1a      	ldr	r2, [r3, #32]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	401a      	ands	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1a      	ldr	r2, [r3, #32]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 031f 	and.w	r3, r3, #31
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
	...

08008de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e06d      	b.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a30      	ldr	r2, [pc, #192]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a2f      	ldr	r2, [pc, #188]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a20      	ldr	r2, [pc, #128]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d022      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d01d      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a1d      	ldr	r2, [pc, #116]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d018      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1a      	ldr	r2, [pc, #104]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00e      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a15      	ldr	r2, [pc, #84]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a16      	ldr	r2, [pc, #88]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d10c      	bne.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40010400 	.word	0x40010400
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40001800 	.word	0x40001800
 8008f00:	40014000 	.word	0x40014000

08008f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <__errno>:
 8008f50:	4b01      	ldr	r3, [pc, #4]	; (8008f58 <__errno+0x8>)
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	2400038c 	.word	0x2400038c

08008f5c <__libc_init_array>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4d0d      	ldr	r5, [pc, #52]	; (8008f94 <__libc_init_array+0x38>)
 8008f60:	4c0d      	ldr	r4, [pc, #52]	; (8008f98 <__libc_init_array+0x3c>)
 8008f62:	1b64      	subs	r4, r4, r5
 8008f64:	10a4      	asrs	r4, r4, #2
 8008f66:	2600      	movs	r6, #0
 8008f68:	42a6      	cmp	r6, r4
 8008f6a:	d109      	bne.n	8008f80 <__libc_init_array+0x24>
 8008f6c:	4d0b      	ldr	r5, [pc, #44]	; (8008f9c <__libc_init_array+0x40>)
 8008f6e:	4c0c      	ldr	r4, [pc, #48]	; (8008fa0 <__libc_init_array+0x44>)
 8008f70:	f000 f93a 	bl	80091e8 <_init>
 8008f74:	1b64      	subs	r4, r4, r5
 8008f76:	10a4      	asrs	r4, r4, #2
 8008f78:	2600      	movs	r6, #0
 8008f7a:	42a6      	cmp	r6, r4
 8008f7c:	d105      	bne.n	8008f8a <__libc_init_array+0x2e>
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f84:	4798      	blx	r3
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7ee      	b.n	8008f68 <__libc_init_array+0xc>
 8008f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8e:	4798      	blx	r3
 8008f90:	3601      	adds	r6, #1
 8008f92:	e7f2      	b.n	8008f7a <__libc_init_array+0x1e>
 8008f94:	08009a80 	.word	0x08009a80
 8008f98:	08009a80 	.word	0x08009a80
 8008f9c:	08009a80 	.word	0x08009a80
 8008fa0:	08009a84 	.word	0x08009a84
 8008fa4:	00000000 	.word	0x00000000

08008fa8 <exp>:
 8008fa8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8008faa:	ee10 3a90 	vmov	r3, s1
 8008fae:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8008fb2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8008fb6:	18a2      	adds	r2, r4, r2
 8008fb8:	2a3e      	cmp	r2, #62	; 0x3e
 8008fba:	ee10 1a10 	vmov	r1, s0
 8008fbe:	d922      	bls.n	8009006 <exp+0x5e>
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	da06      	bge.n	8008fd2 <exp+0x2a>
 8008fc4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008fc8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008fcc:	b004      	add	sp, #16
 8008fce:	bcf0      	pop	{r4, r5, r6, r7}
 8008fd0:	4770      	bx	lr
 8008fd2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8008fd6:	f04f 0000 	mov.w	r0, #0
 8008fda:	d913      	bls.n	8009004 <exp+0x5c>
 8008fdc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8008fe0:	bf08      	it	eq
 8008fe2:	4281      	cmpeq	r1, r0
 8008fe4:	f000 80a0 	beq.w	8009128 <exp+0x180>
 8008fe8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008fec:	4294      	cmp	r4, r2
 8008fee:	d0e9      	beq.n	8008fc4 <exp+0x1c>
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	da03      	bge.n	8008ffc <exp+0x54>
 8008ff4:	b004      	add	sp, #16
 8008ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8008ff8:	f000 b8c6 	b.w	8009188 <__math_uflow>
 8008ffc:	b004      	add	sp, #16
 8008ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8009000:	f000 b8ca 	b.w	8009198 <__math_oflow>
 8009004:	4604      	mov	r4, r0
 8009006:	4950      	ldr	r1, [pc, #320]	; (8009148 <exp+0x1a0>)
 8009008:	ed91 6b02 	vldr	d6, [r1, #8]
 800900c:	ed91 5b00 	vldr	d5, [r1]
 8009010:	eeb0 7b46 	vmov.f64	d7, d6
 8009014:	eea5 7b00 	vfma.f64	d7, d5, d0
 8009018:	ee17 5a10 	vmov	r5, s14
 800901c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009020:	ed91 6b04 	vldr	d6, [r1, #16]
 8009024:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8009028:	eea6 0b07 	vfma.f64	d0, d6, d7
 800902c:	ed91 6b06 	vldr	d6, [r1, #24]
 8009030:	18d8      	adds	r0, r3, r3
 8009032:	f100 030f 	add.w	r3, r0, #15
 8009036:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800903a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800903e:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8009042:	ee20 7b00 	vmul.f64	d7, d0, d0
 8009046:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800904a:	ed91 4b08 	vldr	d4, [r1, #32]
 800904e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8009052:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8009056:	eea3 4b00 	vfma.f64	d4, d3, d0
 800905a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800905e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8009062:	ee27 7b07 	vmul.f64	d7, d7, d7
 8009066:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800906a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800906e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009072:	eea3 4b00 	vfma.f64	d4, d3, d0
 8009076:	2600      	movs	r6, #0
 8009078:	19f2      	adds	r2, r6, r7
 800907a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800907e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009082:	2c00      	cmp	r4, #0
 8009084:	d14b      	bne.n	800911e <exp+0x176>
 8009086:	42b5      	cmp	r5, r6
 8009088:	db10      	blt.n	80090ac <exp+0x104>
 800908a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800908e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8009130 <exp+0x188>
 8009092:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8009096:	4610      	mov	r0, r2
 8009098:	ec41 0b10 	vmov	d0, r0, r1
 800909c:	eea6 0b00 	vfma.f64	d0, d6, d0
 80090a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80090a4:	b004      	add	sp, #16
 80090a6:	bcf0      	pop	{r4, r5, r6, r7}
 80090a8:	f000 b88a 	b.w	80091c0 <__math_check_oflow>
 80090ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80090b0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80090b4:	4610      	mov	r0, r2
 80090b6:	ec41 0b17 	vmov	d7, r0, r1
 80090ba:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80090be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80090c2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80090c6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80090ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ce:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009138 <exp+0x190>
 80090d2:	d51e      	bpl.n	8009112 <exp+0x16a>
 80090d4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80090d8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80090dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80090e0:	ee34 6b43 	vsub.f64	d6, d4, d3
 80090e4:	ee36 6b05 	vadd.f64	d6, d6, d5
 80090e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80090ec:	ee36 6b03 	vadd.f64	d6, d6, d3
 80090f0:	ee36 5b44 	vsub.f64	d5, d6, d4
 80090f4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	d101      	bne.n	8009102 <exp+0x15a>
 80090fe:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8009140 <exp+0x198>
 8009102:	ed8d 0b00 	vstr	d0, [sp]
 8009106:	ed9d 7b00 	vldr	d7, [sp]
 800910a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800910e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009112:	ee25 0b00 	vmul.f64	d0, d5, d0
 8009116:	b004      	add	sp, #16
 8009118:	bcf0      	pop	{r4, r5, r6, r7}
 800911a:	f000 b845 	b.w	80091a8 <__math_check_uflow>
 800911e:	ec43 2b10 	vmov	d0, r2, r3
 8009122:	eea6 0b00 	vfma.f64	d0, d6, d0
 8009126:	e751      	b.n	8008fcc <exp+0x24>
 8009128:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8009140 <exp+0x198>
 800912c:	e74e      	b.n	8008fcc <exp+0x24>
 800912e:	bf00      	nop
 8009130:	00000000 	.word	0x00000000
 8009134:	7f000000 	.word	0x7f000000
 8009138:	00000000 	.word	0x00000000
 800913c:	00100000 	.word	0x00100000
	...
 8009148:	08009210 	.word	0x08009210

0800914c <with_errno>:
 800914c:	b513      	push	{r0, r1, r4, lr}
 800914e:	4604      	mov	r4, r0
 8009150:	ed8d 0b00 	vstr	d0, [sp]
 8009154:	f7ff fefc 	bl	8008f50 <__errno>
 8009158:	ed9d 0b00 	vldr	d0, [sp]
 800915c:	6004      	str	r4, [r0, #0]
 800915e:	b002      	add	sp, #8
 8009160:	bd10      	pop	{r4, pc}

08009162 <xflow>:
 8009162:	b082      	sub	sp, #8
 8009164:	b158      	cbz	r0, 800917e <xflow+0x1c>
 8009166:	eeb1 7b40 	vneg.f64	d7, d0
 800916a:	ed8d 7b00 	vstr	d7, [sp]
 800916e:	ed9d 7b00 	vldr	d7, [sp]
 8009172:	2022      	movs	r0, #34	; 0x22
 8009174:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009178:	b002      	add	sp, #8
 800917a:	f7ff bfe7 	b.w	800914c <with_errno>
 800917e:	eeb0 7b40 	vmov.f64	d7, d0
 8009182:	e7f2      	b.n	800916a <xflow+0x8>
 8009184:	0000      	movs	r0, r0
	...

08009188 <__math_uflow>:
 8009188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009190 <__math_uflow+0x8>
 800918c:	f7ff bfe9 	b.w	8009162 <xflow>
 8009190:	00000000 	.word	0x00000000
 8009194:	10000000 	.word	0x10000000

08009198 <__math_oflow>:
 8009198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091a0 <__math_oflow+0x8>
 800919c:	f7ff bfe1 	b.w	8009162 <xflow>
 80091a0:	00000000 	.word	0x00000000
 80091a4:	70000000 	.word	0x70000000

080091a8 <__math_check_uflow>:
 80091a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d102      	bne.n	80091b8 <__math_check_uflow+0x10>
 80091b2:	2022      	movs	r0, #34	; 0x22
 80091b4:	f7ff bfca 	b.w	800914c <with_errno>
 80091b8:	4770      	bx	lr
 80091ba:	0000      	movs	r0, r0
 80091bc:	0000      	movs	r0, r0
	...

080091c0 <__math_check_oflow>:
 80091c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80091e0 <__math_check_oflow+0x20>
 80091c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80091c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80091cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d0:	dd02      	ble.n	80091d8 <__math_check_oflow+0x18>
 80091d2:	2022      	movs	r0, #34	; 0x22
 80091d4:	f7ff bfba 	b.w	800914c <with_errno>
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w
 80091e0:	ffffffff 	.word	0xffffffff
 80091e4:	7fefffff 	.word	0x7fefffff

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
